[
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "label",
    "type": "string",
    "defaultValue": "",
    "description": "Text label to display below the value. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "min",
    "type": "number",
    "defaultValue": 0,
    "description": "Min value of the gauge"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "max",
    "type": "number",
    "defaultValue": 100,
    "description": "Max value of the gauge"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "unit",
    "type": "string",
    "defaultValue": "",
    "description": "The unit to display next to the value"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the value displayed in the gauge"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "thick",
    "type": "number",
    "defaultValue": 10,
    "description": "Thickness of the gauge"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "thicknessColor",
    "type": "string",
    "defaultValue": "var(--widget-range-color)",
    "description": "Color of the gauge thickness"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "duration",
    "type": "number",
    "defaultValue": 1500,
    "description": "Animation duration in milliseconds"
  },
  {
    "typeWidget": "scoringFullCircularGauge",
    "name": "thicknessBackgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-segment-color)",
    "description": "Background color of the gauge"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "label",
    "type": "string",
    "defaultValue": "",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "min",
    "type": "number",
    "defaultValue": 0,
    "description": "Min value of the gauge"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "max",
    "type": "number",
    "defaultValue": 100,
    "description": "Max value of the gauge"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "unit",
    "type": "string",
    "defaultValue": "",
    "description": "The unit to display next to the value"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the value displayed in the gauge"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "thick",
    "type": "number",
    "defaultValue": 10,
    "description": "Thickness of the gauge"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "thicknessColor",
    "type": "string",
    "defaultValue": "var(--widget-range-color)",
    "description": "The color of the gauge thickness"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "duration",
    "type": "number",
    "defaultValue": 1500,
    "description": "Animation duration in milliseconds"
  },
  {
    "typeWidget": "scoringSemiCircularGauge",
    "name": "thicknessBackgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-segment-color)",
    "description": "Background color of the gauge"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "label",
    "type": "string",
    "defaultValue": "",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "min",
    "type": "number",
    "defaultValue": 0,
    "description": "Min value of the gauge"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "max",
    "type": "number",
    "defaultValue": 100,
    "description": "Max value of the gauge"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "unit",
    "type": "string",
    "defaultValue": "",
    "description": "The unit to display next to the value"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the value displayed in the gauge"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "thick",
    "type": "number",
    "defaultValue": 10,
    "description": "Thickness of the gauge"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "thicknessColor",
    "type": "string",
    "defaultValue": "var(--widget-range-color)",
    "description": "The color of the gauge thickness"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "duration",
    "type": "number",
    "defaultValue": 1500,
    "description": "Animation duration in milliseconds"
  },
  {
    "typeWidget": "scoringArchCircularGauge",
    "name": "thicknessBackgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-segment-color)",
    "description": "Background color of the gauge"
  },
  {
    "typeWidget": "annotationMarkdown",
    "name": "fontsize",
    "type": "number",
    "defaultValue": 0.3,
    "description": "Markdown text font-size"
  },
  {
    "typeWidget": "annotationMarkdown",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "rgba(0, 0, 0, 0)",
    "description": "Background color of the markdown"
  },
  {
    "typeWidget": "annotationMarkdown",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Text color"
  },
  {
    "typeWidget": "annotationMarkdown",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "annotationMarkdown",
    "name": "textAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "annotationMarkdown",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "annotationMarkdown",
    "name": "centerVertically",
    "type": "boolean",
    "defaultValue": true,
    "description": "Ensure vertical centering of the text"
  },
  {
    "typeWidget": "annotationHtml",
    "name": "fontsize",
    "type": "number",
    "defaultValue": 0.3,
    "description": "Inner text font-size"
  },
  {
    "typeWidget": "annotationHtml",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "rgba(0, 0, 0, 0)",
    "description": "Background color of the generic HTML"
  },
  {
    "typeWidget": "annotationHtml",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Text color"
  },
  {
    "typeWidget": "annotationHtml",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "annotationHtml",
    "name": "textAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "annotationHtml",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "annotationHtml",
    "name": "centerVertically",
    "type": "boolean",
    "defaultValue": true,
    "description": "Ensure vertical centering of the text"
  },
  {
    "typeWidget": "anyDisplay",
    "name": "fontsize",
    "type": "number",
    "defaultValue": 0.3,
    "description": "Font-size"
  },
  {
    "typeWidget": "anyDisplay",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "rgba(0, 0, 0, 0)",
    "description": "Background color"
  },
  {
    "typeWidget": "anyDisplay",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Text color"
  },
  {
    "typeWidget": "anyDisplay",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "Helvetica Neue",
    "description": "Font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "anyDisplay",
    "name": "textAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "anyDisplay",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "anyDisplay",
    "name": "centerVertically",
    "type": "boolean",
    "defaultValue": true,
    "description": "Ensure vertical centering of the text"
  },
  {
    "typeWidget": "kpiCard",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "kpiCard",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "kpiCard",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed above or below the value"
  },
  {
    "typeWidget": "kpiCard",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "kpiCard",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "kpiCard",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "kpiCard",
    "name": "valuePosition",
    "type": "string",
    "defaultValue": "bottom",
    "description": "Value position. Possible values: bottom, top"
  },
  {
    "typeWidget": "kpiCard",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 2,
    "description": "Value font-size"
  },
  {
    "typeWidget": "kpiCard",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the value displayed in the kpi card"
  },
  {
    "typeWidget": "kpiCard",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "kpiCard",
    "name": "decimalDigits",
    "type": "number",
    "defaultValue": 3,
    "description": "Number decimal digitls precision for display"
  },
  {
    "typeWidget": "kpiCard",
    "name": "unit",
    "type": "string",
    "defaultValue": "unitText",
    "description": "The unit to display next to the value"
  },
  {
    "typeWidget": "kpiCard",
    "name": "displayUnit",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the unit text is displayed next to the value"
  },
  {
    "typeWidget": "kpiCard",
    "name": "unitFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "The font-size of the unit text"
  },
  {
    "typeWidget": "kpiCard",
    "name": "unitColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "The color of the unit text"
  },
  {
    "typeWidget": "kpiCard",
    "name": "borderShadow",
    "type": "boolean",
    "defaultValue": false,
    "description": "Enable border shadow effect"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed above or below the value"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "valuePosition",
    "type": "string",
    "defaultValue": "bottom",
    "description": "Value position. Possible values: bottom, top"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 3,
    "description": "Value font-size"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the value displayed in the KPI card"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "decimalDigits",
    "type": "number",
    "defaultValue": 3,
    "description": "Number decimal digitls precision for display"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "subLabelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Sub-label font-size"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "subLabelColor",
    "type": "string",
    "defaultValue": "var(--widget-subtext-color)",
    "description": "Sub-label text color"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "subLabelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "borderShadow",
    "type": "boolean",
    "defaultValue": false,
    "description": "Enable border shadow effect"
  },
  {
    "typeWidget": "advancedKpiCard",
    "name": "graphColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Color of the graph"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed on the left side of the slider"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "labelWidthProportion",
    "type": "string",
    "defaultValue": "30%",
    "description": "Label width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "minRange",
    "type": "number",
    "defaultValue": 0,
    "description": "Minimum range allowed between the two handles of the slider"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "maxRange",
    "type": "number",
    "defaultValue": 100,
    "description": "Maximum range allowed between the two handles of the slider"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "step",
    "type": "number",
    "defaultValue": 0.1,
    "description": "Increment of the slider"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "precision",
    "type": "number",
    "defaultValue": 2,
    "description": "Number decimal digitls precision for display"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "enforceStep",
    "type": "boolean",
    "defaultValue": false,
    "description": "Enforce value to align precisely with the defined step size"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "disableAnimation",
    "type": "boolean",
    "defaultValue": false,
    "description": "Disable slider animation"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "rangeActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit min and max range values from min/max actuators"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "forceValuesToMinAndMax",
    "type": "boolean",
    "defaultValue": false,
    "description": "Force values to min and max values"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "sliderSegmentColor",
    "type": "string",
    "defaultValue": "var(--widget-segment-color)",
    "description": "Slider segment color"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "sliderRangeColor",
    "type": "string",
    "defaultValue": "var(--widget-range-color)",
    "description": "Slider Range color"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "sliderHandleDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-default-color)",
    "description": "Color of the slider handle"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "sliderHandleHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-hover-color)",
    "description": "Hover color of the slider handle"
  },
  {
    "typeWidget": "flatUiDoubleSlider",
    "name": "sliderHandleActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-active-color)",
    "description": "Active color of the slider handle"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed on the left side of the date picker"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "labelWidthProportion",
    "type": "string",
    "defaultValue": "30%",
    "description": "Label width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "valueTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color of the simple calendar"
  },
  {
    "typeWidget": "datepickerSimple",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-input-color)",
    "description": "Background color of the simple calendar"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": false,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed on the left side of the date picker"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "datepickerVisible",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a label is displayed on the left side of the date-range picker"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "displayTimePicker",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, time is displayed next to the date in AM/PM format"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "displayTimePicker24Hour",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true and displayTimePicker also true, time is displayed next to the date"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "labelWidthProportion",
    "type": "string",
    "defaultValue": "25%",
    "description": "Label width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "valueTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color of the date-range calendar"
  },
  {
    "typeWidget": "dateRangePicker",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-input-color)",
    "description": "Background color of the date-range calendar"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed on the left side of the time picker"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "labelWidthProportion",
    "type": "string",
    "defaultValue": "30%",
    "description": "Label width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "valueTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color of the simple clock"
  },
  {
    "typeWidget": "timepickerSimple",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-input-color)",
    "description": "Background color of the simple clock"
  },
  {
    "typeWidget": "calendarD3",
    "name": "AllYearsVisible",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, all years are visible. If false, a signle year is displayed at a time"
  },
  {
    "typeWidget": "calendarD3",
    "name": "UndefinedValueColor",
    "type": "string",
    "defaultValue": "#F6F6F6",
    "description": "Color of undefined value in the year calendar"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed on the left side of the select widget"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "selectWidthProportion",
    "type": "string",
    "defaultValue": "70%",
    "description": "Value width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "isNumber",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, value type is a number"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "selectValueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "selectValueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "selectedValueColor",
    "type": "string",
    "defaultValue": "var(--widget-select-option-highlighted-text)",
    "description": "Color of the selected value"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "selectedItemDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-select-option-highlighted-color)",
    "description": "Color of the selected item in the drop-down list"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "selectedItemHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-select-option-highlighted-color)",
    "description": "Hover color of the selected item in the drop-down list"
  },
  {
    "typeWidget": "flatUiSelect",
    "name": "isKeyValuePairs",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the key/value format is not required"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "addControls",
    "type": "boolean",
    "defaultValue": false,
    "description": ""
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "resetPastSelection",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, past selection is reset"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.4,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxWidth",
    "type": "number",
    "defaultValue": 7,
    "description": "Width of the checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxHeight",
    "type": "number",
    "defaultValue": 1.5,
    "description": "Height of the checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "valueDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Color of displayed text in checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-color)",
    "description": "Backgroud color of checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxBorderColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "valueHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-hover-text)",
    "description": "Hover color of displayed text in checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-hover-color)",
    "description": "Hover color of the checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxHoverBorderColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-hover-border-color)",
    "description": "Hover border color"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "valueFocusColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-checked-text)",
    "description": "Focus color of displayed text in checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxFocusColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-checked-color)",
    "description": "Focus color of checkboxs"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "checkboxFocusBorderColor",
    "type": "string",
    "defaultValue": "var(--widget-multiselect-checked-border-color)",
    "description": "Focus border color"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiMultiSelect",
    "name": "isNumber",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, value type is a number"
  },
  {
    "typeWidget": "flatUiList",
    "name": "addControls",
    "type": "boolean",
    "defaultValue": false,
    "description": ""
  },
  {
    "typeWidget": "flatUiList",
    "name": "listValueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiList",
    "name": "listValueColor",
    "type": "string",
    "defaultValue": "var(--widget-select-drop-text)",
    "description": "Color of the displayed values in the list"
  },
  {
    "typeWidget": "flatUiList",
    "name": "listBackgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-select-drop-color)",
    "description": "Background color"
  },
  {
    "typeWidget": "flatUiList",
    "name": "selectValueColor",
    "type": "string",
    "defaultValue": "var(--widget-select-option-highlighted-text)",
    "description": "Color of the selected value"
  },
  {
    "typeWidget": "flatUiList",
    "name": "selectValueBackgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-select-option-highlighted-color)",
    "description": "Background color"
  },
  {
    "typeWidget": "flatUiList",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiList",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiList",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "headerLine",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, header line is displayed in table"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "tableValueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "striped",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, display stripped lines in table"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-table-value-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "valueAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "bordered",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, add a table border"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "noBorder",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, add table gridlines"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "editableCols",
    "type": "string",
    "defaultValue": "[]",
    "description": "Indicates the editable column numbers. For instance, [1] denotes that only column number 1 is editable"
  },
  {
    "typeWidget": "flatUiTable",
    "name": "backgroundColor",
    "type": "object",
    "defaultValue": {
      "primary": "var(--widget-color-0)",
      "secondary": "var(--widget-table-striped-odd)"
    },
    "description": "Background color regarding primary and secondary rows"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed above on left or right side position of the checkbox"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "labelPosition",
    "type": "string",
    "defaultValue": "right",
    "description": "Label position. Possible values: left, right"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "checkboxSize",
    "type": "number",
    "defaultValue": 1,
    "description": "Checkbox size"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "checkedColor",
    "type": "string",
    "defaultValue": "var(--widget-input-checked-color)",
    "description": "Checkbox color"
  },
  {
    "typeWidget": "flatUiCheckbox",
    "name": "uncheckedColor",
    "type": "string",
    "defaultValue": "var(--widget-input-unchecked-color)",
    "description": "Unchecked checkbox color"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed on the left or right side of the switch"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "labelPosition",
    "type": "string",
    "defaultValue": "right",
    "description": "Label position. Possible values: left, right"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "switchWidthProportion",
    "type": "string",
    "defaultValue": "30%",
    "description": "switch width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "switchOnColor",
    "type": "string",
    "defaultValue": "var(--widget-input-checked-color)",
    "description": "The on color of the switch"
  },
  {
    "typeWidget": "flatUiSwitch",
    "name": "switchOffColor",
    "type": "string",
    "defaultValue": "var(--widget-input-unchecked-color)",
    "description": "The off color of the switch"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "valueWidthProportion",
    "type": "string",
    "defaultValue": "70%",
    "description": "Value width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-input-color)",
    "description": "Background color of the address auto-completion"
  },
  {
    "typeWidget": "flatUiHereAutocompleteValue",
    "name": "countryIsoCodes",
    "type": "string",
    "defaultValue": "FRA",
    "description": "Country ISO code (Alpha-3 code)"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "rangeActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit min and max values from min/max actuators"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "min",
    "type": "number",
    "defaultValue": 0,
    "description": "Min value of the slider"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "max",
    "type": "number",
    "defaultValue": 100,
    "description": "Max value of the slider"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "step",
    "type": "number",
    "defaultValue": 1,
    "description": "Increment of the slider"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "displayValue",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, display the value on the widget right side"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "validationOnFocusOut",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the value modification is validated upon focus-out event"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "valueBorderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "labelWidthProportion",
    "type": "string",
    "defaultValue": "20%",
    "description": "Label width proportion with respect to the widget width. Possible values: 0-100%. labelWidthProportion + sliderWidthProportion + valueWidthProportion must be 100%"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "sliderWidthProportion",
    "type": "string",
    "defaultValue": "60%",
    "description": "Slider width proportion with respect to the widget width. Possible values: 0-100%. labelWidthProportion + sliderWidthProportion + valueWidthProportion must be 100%"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "valueWidthProportion",
    "type": "string",
    "defaultValue": "20%",
    "description": "Value width proportion with respect to the widget width. Possible values: 0-100%. labelWidthProportion + sliderWidthProportion + valueWidthProportion must be 100%"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "sliderRangeColor",
    "type": "string",
    "defaultValue": "var(--widget-range-color)",
    "description": "Slider range color"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "sliderSegmentColor",
    "type": "string",
    "defaultValue": "var(--widget-segment-color)",
    "description": "Slider segment color"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "sliderHandleDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-default-color)",
    "description": "Color of the slider handle"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "sliderHandleHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-hover-color)",
    "description": "Hover color of the slider handle"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "sliderHandleActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-active-color)",
    "description": "Active color of the slider handle"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "unit",
    "type": "string",
    "defaultValue": "unitText",
    "description": "The unit to display next to the slider value"
  },
  {
    "typeWidget": "flatUiHorizontalSlider",
    "name": "displayUnit",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the unit text is displayed next to the value"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "rangeActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit min and max values from min/max actuators"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "min",
    "type": "number",
    "defaultValue": 0,
    "description": "Min value of the slider"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "max",
    "type": "number",
    "defaultValue": 100,
    "description": "Max value of the slider"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "step",
    "type": "number",
    "defaultValue": 1,
    "description": "Increment of the slider"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "sliderRangeColor",
    "type": "string",
    "defaultValue": "var(--widget-range-color)",
    "description": "Slider range color"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "sliderSegmentColor",
    "type": "string",
    "defaultValue": "var(--widget-segment-color)",
    "description": "Slider segment color"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "sliderHandleDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-default-color)",
    "description": "Color of the slider handle"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "sliderHandleHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-hover-color)",
    "description": "Hover color of the slider handle"
  },
  {
    "typeWidget": "flatUiVerticalSlider",
    "name": "sliderHandleActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-handle-active-color)",
    "description": "Active color of the slider handle"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "rangeActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit min and max values from min/max actuators"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "min",
    "type": "number",
    "defaultValue": 0,
    "description": "Min value of the progress bar"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "max",
    "type": "number",
    "defaultValue": 100,
    "description": "Max value of the progress bar"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "displayValue",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, display the value on the widget right side"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "labelWidthProportion",
    "type": "string",
    "defaultValue": "20%",
    "description": "Label width proportion with respect to the widget width. Possible values: 0-100%. labelWidthProportion + progressBarWidthProportion + valueWidthProportion must be 100%"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "progressBarWidthProportion",
    "type": "string",
    "defaultValue": "60%",
    "description": "Progress bar width proportion with respect to the widget width. Possible values: 0-100%. labelWidthProportion + progressBarWidthProportion + valueWidthProportion must be 100%"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "valueWidthProportion",
    "type": "string",
    "defaultValue": "20%",
    "description": "Value width proportion with respect to the widget width. Possible values: 0-100%. labelWidthProportion + progressBarWidthProportion + valueWidthProportion must be 100%"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "progressBarRangeColor",
    "type": "string",
    "defaultValue": "var(--widget-range-color)",
    "description": "Range color of the progress bar"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "progressBarSegmentColor",
    "type": "string",
    "defaultValue": "var(--widget-segment-color)",
    "description": "Segment color of the progress bar"
  },
  {
    "typeWidget": "flatUiProgressBar",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the label is displayed"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "labelTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "labelTextPosition",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text position. Possible values: left, top, right, bottom"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "valueWidthProportion",
    "type": "string",
    "defaultValue": "70%",
    "description": "Value width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "validationButton",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the value modification is validated upon the button click event"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "validationBtnDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-button-primary-color)",
    "description": "Color of the validation button"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "validationBtnActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Active color of the validation button"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "validationBtnHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-button-hover-color)",
    "description": "Hover color of the validation button"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "validationOnFocusOut",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the value modification is validated upon focus-out event"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "isNumber",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, value type is a number"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "isPassword",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, value type is a obscured"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "decimalDigits",
    "type": "number",
    "defaultValue": 3,
    "description": "Number decimal digitls precision for display"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-input-text)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "valueTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "unit",
    "type": "string",
    "defaultValue": "unitText",
    "description": "The unit to display next to the value"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "displayUnit",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the unit text is displayed next to the value"
  },
  {
    "typeWidget": "flatUiValue",
    "name": "unitFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "The font-size of the unit text"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a label is displayed"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "labelTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "labelTextPosition",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text position. Possible values: left, top, right, bottom"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "valueWidthProportion",
    "type": "string",
    "defaultValue": "70%",
    "description": "Value width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "validationButton",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the value modification is validated upon the button click event"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "validationBtnDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-button-primary-color)",
    "description": "Color of the validation button"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "validationBtnActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Active color of the validation button"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "validationBtnHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-button-hover-color)",
    "description": "Hover color of the validation button"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "validationOnFocusOut",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the value modification is validated upon focus-out event"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "isPassword",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, value type is a obscured"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-input-text)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "valueTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiTextInput",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-input-color)",
    "description": "Background color of the text input"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a label is displayed"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "labelTextPosition",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text position. Possible values: left, top, right, bottom"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "labelTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "valueWidthProportion",
    "type": "string",
    "defaultValue": "70%",
    "description": "Value width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "validationButton",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the value modification is validated upon the button click event"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "validationBtnDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-button-primary-color)",
    "description": "Color of the validation button"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "validationBtnActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Active color of the validation button"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "validationBtnHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-button-hover-color)",
    "description": "Hover color of the validation button"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "validationOnFocusOut",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, the value modification is validated upon focus-out event"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-input-text)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "valueTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-input-color)",
    "description": "Background color of the numeric input"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "unit",
    "type": "string",
    "defaultValue": "unitText",
    "description": "The unit to display next to the value"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "displayUnit",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the unit text is displayed next to the value"
  },
  {
    "typeWidget": "flatUiNumericInput",
    "name": "unitFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "The font-size of the unit text"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a label is displayed"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "labelTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "labelTextPosition",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text position. Possible values: left, top, right, bottom"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "valueWidthProportion",
    "type": "string",
    "defaultValue": "70%",
    "description": "Value width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "decimalDigits",
    "type": "number",
    "defaultValue": 3,
    "description": "Number decimal digitls precision for display"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "valueFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Value font-size"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "valueColor",
    "type": "string",
    "defaultValue": "var(--widget-input-text)",
    "description": "Color of the displayed value"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "valueTextAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Value text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-input-color)",
    "description": "Background color of the value display"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "unit",
    "type": "string",
    "defaultValue": "unitText",
    "description": "The unit to display next to the value"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "displayUnit",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the unit text is displayed next to the value"
  },
  {
    "typeWidget": "flatUiValueDisplay",
    "name": "unitFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "The font-size of the unit text"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "text",
    "type": "string",
    "defaultValue": "Push button",
    "description": "Displayed text button"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "numberOfTriggers",
    "type": "number",
    "defaultValue": 1,
    "description": "Number of triggers"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "fileInput",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the widget transforms into a load file button"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "binaryFileInput",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the widget transforms into a binary load file button"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "buttonFontSize",
    "type": "number",
    "defaultValue": 0.3,
    "description": "Button font size"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "displayIcon",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, it displays the icon described in fontAwsomIcon"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "fontAwesomeIcon",
    "type": "string",
    "defaultValue": "",
    "description": "FontAwesome icon. Examples can be found at https://fontawesome.com/icons"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "buttonFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Button text font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "buttonTextColor",
    "type": "string",
    "defaultValue": "var(--widget-button-primary-text)",
    "description": "Text color"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "buttonDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-button-primary-color)",
    "description": "Color of the button"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "buttonActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Active color of the button"
  },
  {
    "typeWidget": "flatUiButton",
    "name": "buttonHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-button-hover-color)",
    "description": "Hover color of the button"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "text",
    "type": "string",
    "defaultValue": "Save to file",
    "description": "Text label to display"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "fileName",
    "type": "string",
    "defaultValue": "export.txt",
    "description": "File name to export"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "buttonFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Text font size"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "buttonFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Button text font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "buttonTextColor",
    "type": "string",
    "defaultValue": "var(--widget-button-primary-text)",
    "description": "Text color"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "buttonDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-button-primary-color)",
    "description": "Color of the button"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "buttonActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Active color of the button"
  },
  {
    "typeWidget": "saveToFileButton",
    "name": "buttonHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-button-hover-color)",
    "description": "Hover color of the button"
  },
  {
    "typeWidget": "loadFile",
    "name": "label",
    "type": "string",
    "defaultValue": "Choose a file",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "loadFile",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a label is displayed"
  },
  {
    "typeWidget": "loadFile",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.1,
    "description": "Label font-size"
  },
  {
    "typeWidget": "loadFile",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "loadFile",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "loadFile",
    "name": "labelAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Label text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "loadFile",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Text color"
  },
  {
    "typeWidget": "loadFile",
    "name": "subTextColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Sub-text color"
  },
  {
    "typeWidget": "loadFile",
    "name": "textSize",
    "type": "number",
    "defaultValue": 0.1,
    "description": "Text font-size"
  },
  {
    "typeWidget": "loadFile",
    "name": "binaryFileInput",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, the widget transforms into a binary load file button"
  },
  {
    "typeWidget": "loadFile",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "loadFile",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "loadFile",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-dropzone-background-color)",
    "description": "Background color of the file loader"
  },
  {
    "typeWidget": "loadFile",
    "name": "displayBrowseButton",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a browser button is displayed"
  },
  {
    "typeWidget": "loadFile",
    "name": "labelBackgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-dropzone-label-background-color)",
    "description": "Background color of the label"
  },
  {
    "typeWidget": "loadFile",
    "name": "browseButtonTextColor",
    "type": "string",
    "defaultValue": "var(--widget-button-text)",
    "description": "Text color of the browser button"
  },
  {
    "typeWidget": "loadFile",
    "name": "browseButtonDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-button-color)",
    "description": "Color of the browse button"
  },
  {
    "typeWidget": "loadFile",
    "name": "browseButtonActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Active color of the browser button"
  },
  {
    "typeWidget": "loadFile",
    "name": "browseButtonHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-button-hover-color)",
    "description": "Hover color of the browser button"
  },
  {
    "typeWidget": "loadFile",
    "name": "deleteButtonDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-delete-button-default-color)",
    "description": "Color of the delete button"
  },
  {
    "typeWidget": "loadFile",
    "name": "deleteButtonActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-delete-button-active-color)",
    "description": "Active color of the delete button"
  },
  {
    "typeWidget": "loadFile",
    "name": "deleteButtonHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-delete-button-hover-color)",
    "description": "Hover color of the delete button"
  },
  {
    "typeWidget": "loadFile",
    "name": "deleteButtonIconColor",
    "type": "string",
    "defaultValue": "var(--widget-delete-button-icon-color)",
    "description": "Color of the icon delete button"
  },
  {
    "typeWidget": "loadFile",
    "name": "deleteButtonIconHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-delete-button-icon-hover-color)",
    "description": "Hover color of the icon delete button"
  },
  {
    "typeWidget": "spinnerStatus",
    "name": "fontsize",
    "type": "number",
    "defaultValue": 1,
    "description": "Spinner dots font-size"
  },
  {
    "typeWidget": "spinnerStatus",
    "name": "color",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Spinner color"
  },
  {
    "typeWidget": "spinnerStatus",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "var(--disabled-color-opacity)",
    "description": "Background color of the spinner"
  },
  {
    "typeWidget": "ledStatus",
    "name": "label",
    "type": "string",
    "defaultValue": "labelText",
    "description": "Text label to display. Manually editing this field will set the inheritLabelFromData parameter to false"
  },
  {
    "typeWidget": "ledStatus",
    "name": "inheritLabelFromData",
    "type": "boolean",
    "defaultValue": true,
    "description": "When set to true, the label will be inherited from the connected variable"
  },
  {
    "typeWidget": "ledStatus",
    "name": "displayLabel",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, a label is displayed"
  },
  {
    "typeWidget": "ledStatus",
    "name": "labelFontSize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label font-size"
  },
  {
    "typeWidget": "ledStatus",
    "name": "labelColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Label text color"
  },
  {
    "typeWidget": "ledStatus",
    "name": "labelFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Label font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "ledStatus",
    "name": "labelWidthProportion",
    "type": "string",
    "defaultValue": "60%",
    "description": "Label width proportion with respect to the widget width. The value should be in percentage"
  },
  {
    "typeWidget": "ledStatus",
    "name": "onColor",
    "type": "string",
    "defaultValue": "#00b700",
    "description": "Led on color"
  },
  {
    "typeWidget": "ledStatus",
    "name": "offColor",
    "type": "string",
    "defaultValue": "#004d00",
    "description": "Led off color"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "text",
    "type": "string",
    "defaultValue": "Type texte",
    "description": "Text of the tip"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "enableActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit tooltip text from value actuator"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "fontSize",
    "type": "string",
    "defaultValue": "medium",
    "description": "Tooltip text font size. It can be small, medium, large, or a number as 10px"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "fontWeight",
    "type": "string",
    "defaultValue": "bold",
    "description": "font weight of the tip. It can be thin, light, regular, medium, bold,..."
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "fontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Text font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-button-text)",
    "description": "Text color of the tip"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "textPadding",
    "type": "number",
    "defaultValue": 10,
    "description": "Text padding in px"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "tipBackgroundColor",
    "type": "string",
    "defaultValue": "var(--widget-button-color)",
    "description": "Background color of the tip"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "tipBorderColor",
    "type": "string",
    "defaultValue": "var(--widget-button-text)",
    "description": "Border color of the tip"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "tipWidth",
    "type": "number",
    "defaultValue": 200,
    "description": "Tip width in px"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "tipPositions",
    "type": "object",
    "defaultValue": ["right"],
    "description": "Tip position, it can choose 1 to 4 options together ['right', 'bottom', 'left', 'top']"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "tipEventTrigger",
    "type": "string",
    "defaultValue": "hover",
    "description": "Tip event trigger, it can be hover or click if 1 event. If 2 events (in and out) it can be ['mouseover', 'click'] or ['focus', 'blur']"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "iconColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Icon color"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "iconSize",
    "type": "number",
    "defaultValue": 1,
    "description": "Icon size"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "iconSign",
    "type": "string",
    "defaultValue": "info-circle",
    "description": "Icon sign. It can be info-circle or question-circle or exclamation-circle [FontAwesome]"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "cornerRadius",
    "type": "number",
    "defaultValue": 10,
    "description": "Icon corner radius"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "spikeLength",
    "type": "number",
    "defaultValue": 15,
    "description": "Icon spike length"
  },
  {
    "typeWidget": "annotationIconInfo",
    "name": "spikeGirth",
    "type": "number",
    "defaultValue": 5,
    "description": "Icone spike girth"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "text",
    "type": "string",
    "defaultValue": "Type texte",
    "description": "The label text"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "enableActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit label text from value actuator"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "fontsize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Label text font-size"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "rgba(0, 0, 0, 0)",
    "description": "Label background color"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Text color"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "textAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color"
  },
  {
    "typeWidget": "annotationLabel",
    "name": "centerVertically",
    "type": "boolean",
    "defaultValue": true,
    "description": "Ensure vertical centering of the text"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "text",
    "type": "string",
    "defaultValue": "",
    "description": "The label text"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "enableActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit tooltip text from value actuator"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "fontsize",
    "type": "number",
    "defaultValue": 0.5,
    "description": "Font-size"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "backgroundColor",
    "type": "string",
    "defaultValue": "rgba(228, 228, 228, 1)",
    "description": "Background color"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-label-color)",
    "description": "Text color"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "valueFontFamily",
    "type": "string",
    "defaultValue": "var(--widget-font-family)",
    "description": "Value font-family. Possible values: Arial, Verdana, Tahoma, Trebuchet MS, Times New Roman, Georgia, Garamond, Courier New, Brush Script MT, Montserrat, ralway, Lucida Grande, Lato, Menlo"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "textAlign",
    "type": "string",
    "defaultValue": "left",
    "description": "Text horizontal alignment. Possible values: left, center, right"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "displayBorder",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, a border is displayed around the widget"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "borderColor",
    "type": "string",
    "defaultValue": "var(--widget-border-color)",
    "description": "Border color of the form"
  },
  {
    "typeWidget": "annotationRectangle",
    "name": "centerVertically",
    "type": "boolean",
    "defaultValue": true,
    "description": "Ensure vertical centering of the text"
  },
  {
    "typeWidget": "annotationImage",
    "name": "keepRatio",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, image ratio is kept intact to avoid distortion"
  },
  {
    "typeWidget": "annotationImage",
    "name": "hideImageURL",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, URL image is hidden. URL image allows user to manually load image at edition mode"
  },
  {
    "typeWidget": "annotationImage",
    "name": "enableActuator",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, inherit image URL from value actuator"
  },
  {
    "typeWidget": "annotationImageConnected",
    "name": "keepRatio",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, image ratio is kept intact to avoid distortion"
  },
  {
    "typeWidget": "annotationImageConnected",
    "name": "hideImageURL",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, URL image is hidden. URL image allows user to manually load image at edition mode"
  },
  {
    "typeWidget": "annotationImageConnected",
    "name": "enableActuator",
    "type": "boolean",
    "defaultValue": true,
    "description": "If true, inherit image data from value actuator"
  },
  {
    "typeWidget": "annotationVideo",
    "name": "enforceCaptureRatio",
    "type": "boolean",
    "defaultValue": false,
    "description": "Enforce the ratio of the screeshot"
  },
  {
    "typeWidget": "annotationVideo",
    "name": "captureRatio",
    "type": "number",
    "defaultValue": 1,
    "description": "Ratio of the screeshot"
  },
  {
    "typeWidget": "annotationVideo",
    "name": "pauseOnCapture",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, pause after screeshot event"
  },
  {
    "typeWidget": "annotationVideo",
    "name": "buttonTextColor",
    "type": "string",
    "defaultValue": "var(--widget-button-text)",
    "description": "Buttons text color"
  },
  {
    "typeWidget": "annotationVideo",
    "name": "buttonDefaultColor",
    "type": "string",
    "defaultValue": "var(--widget-button-color)",
    "description": "Color of the buttons"
  },
  {
    "typeWidget": "annotationVideo",
    "name": "buttonActiveColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Active color of the buttons"
  },
  {
    "typeWidget": "annotationVideo",
    "name": "buttonHoverColor",
    "type": "string",
    "defaultValue": "var(--widget-button-active-color)",
    "description": "Hover color of the buttons"
  },
  {
    "typeWidget": "plotlyLine",
    "name": "numberOfAxis",
    "type": "number",
    "defaultValue": 1,
    "description": "Set the number of axis"
  },
  {
    "typeWidget": "plotlyLine",
    "name": "layout",
    "type": "object",
    "defaultValue": {
      "paper_bgcolor": "rgba(0,0,0,0)",
      "plot_bgcolor": "rgba(0,0,0,0)",
      "colorway": [
        "var(--widget-color-2)",
        "var(--widget-color-5)",
        "var(--widget-color-6)",
        "var(--widget-color-7)",
        "var(--widget-color-8)",
        "var(--widget-color-9)",
        "var(--widget-color-10)",
        "var(--widget-color-11)",
        "var(--widget-color-12)",
        "var(--widget-color-13)"
      ],
      "legend": {
        "font": {
          "color": "var(--widget-color)"
        }
      },
      "title": "",
      "xaxis": {
        "title": "x",
        "tickfont": {
          "color": "var(--widget-color)"
        }
      },
      "yaxis": {
        "title": "y",
        "tickfont": {
          "color": "var(--widget-color)"
        }
      },
      "showlegend": true,
      "margin": {
        "l": 50,
        "r": 50,
        "b": 100,
        "t": 100,
        "pad": 4
      }
    },
    "description": "Layout object description"
  },
  {
    "typeWidget": "plotlyLine",
    "name": "hideModeBar",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, hide Plotly widget Modebar"
  },
  {
    "typeWidget": "plotlyBar",
    "name": "numberOfAxis",
    "type": "number",
    "defaultValue": 1,
    "description": "Number of axis"
  },
  {
    "typeWidget": "plotlyBar",
    "name": "layout",
    "type": "object",
    "defaultValue": {
      "paper_bgcolor": "rgba(0,0,0,0)",
      "plot_bgcolor": "rgba(0,0,0,0)",
      "colorway": [
        "var(--widget-color-2)",
        "var(--widget-color-5)",
        "var(--widget-color-6)",
        "var(--widget-color-7)",
        "var(--widget-color-8)",
        "var(--widget-color-9)",
        "var(--widget-color-10)",
        "var(--widget-color-11)",
        "var(--widget-color-12)",
        "var(--widget-color-13)"
      ],
      "legend": {
        "font": {
          "color": "var(--widget-color)"
        }
      },
      "title": "",
      "barmode": "group",
      "xaxis": {
        "title": "x",
        "tickfont": {
          "color": "var(--widget-color)"
        }
      },
      "yaxis": {
        "title": "y",
        "tickfont": {
          "color": "var(--widget-color)"
        }
      },
      "showlegend": true,
      "margin": {
        "l": 50,
        "r": 50,
        "b": 100,
        "t": 100,
        "pad": 4
      }
    },
    "description": "Layout object description"
  },
  {
    "typeWidget": "plotlyBar",
    "name": "hideModeBar",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, hide Plotly widget Modebar"
  },
  {
    "typeWidget": "plotlyPie",
    "name": "layout",
    "type": "object",
    "defaultValue": {
      "title": "",
      "paper_bgcolor": "rgba(0,0,0,0)",
      "plot_bgcolor": "rgba(0,0,0,0)",
      "colorway": [
        "var(--widget-color-2)",
        "var(--widget-color-5)",
        "var(--widget-color-6)",
        "var(--widget-color-7)"
      ],
      "legend": {
        "font": {
          "color": "var(--widget-color)"
        }
      },
      "showlegend": false,
      "margin": {
        "l": 50,
        "r": 50,
        "b": 100,
        "t": 100,
        "pad": 4
      }
    },
    "description": "Layout object description"
  },
  {
    "typeWidget": "plotlyPie",
    "name": "hideModeBar",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, hide Plotly widget Modebar"
  },
  {
    "typeWidget": "plotly3dSurface",
    "name": "layout",
    "type": "object",
    "defaultValue": {
      "paper_bgcolor": "rgba(0,0,0,0)",
      "plot_bgcolor": "rgba(0,0,0,0)",
      "colorway": [
        "var(--widget-color-2)",
        "var(--widget-color-5)",
        "var(--widget-color-6)",
        "var(--widget-color-7)",
        "var(--widget-color-8)",
        "var(--widget-color-9)",
        "var(--widget-color-10)",
        "var(--widget-color-11)",
        "var(--widget-color-12)",
        "var(--widget-color-13)"
      ],
      "legend": {
        "font": {
          "color": "var(--widget-color)"
        }
      },
      "title": "",
      "scene": {
        "xaxis": {
          "title": "x"
        },
        "yaxis": {
          "title": "y"
        },
        "zaxis": {
          "title": "z"
        }
      },
      "showlegend": true,
      "margin": {
        "l": 50,
        "r": 50,
        "b": 100,
        "t": 100,
        "pad": 4
      }
    },
    "description": "Layout object description"
  },
  {
    "typeWidget": "plotly3dSurface",
    "name": "hideModeBar",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, hide Plotly widget Modebar"
  },
  {
    "typeWidget": "plotlyGeneric",
    "name": "hideModeBar",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, hide Plotly widget Modebar"
  },
  {
    "typeWidget": "plotlyPyGeneric",
    "name": "enforceTextColor",
    "type": "boolean",
    "defaultValue": true,
    "description": "Enforces theme or user based text color. Disable this property if it overrides your Plotly preferences"
  },
  {
    "typeWidget": "plotlyPyGeneric",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Text color in case enforceTextColor is true"
  },
  {
    "typeWidget": "plotlyPyGeneric",
    "name": "enforceBackgroundTransparency",
    "type": "boolean",
    "defaultValue": true,
    "description": "Enforces plot background transparency. Disable this property if it overrides your Plotly preferences"
  },
  {
    "typeWidget": "plotlyPyGeneric",
    "name": "hideModeBar",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, hide Plotly widget Modebar"
  },
  {
    "typeWidget": "plotlyRealTime",
    "name": "enforceTextColor",
    "type": "boolean",
    "defaultValue": true,
    "description": "Enforces theme or user based text color. Disable this property if it overrides your Plotly preferences"
  },
  {
    "typeWidget": "plotlyRealTime",
    "name": "textColor",
    "type": "string",
    "defaultValue": "var(--widget-color)",
    "description": "Text color in case enforceTextColor is true"
  },
  {
    "typeWidget": "plotlyRealTime",
    "name": "enforceBackgroundTransparency",
    "type": "boolean",
    "defaultValue": true,
    "description": "Enforces plot background transparency. Disable this property if it overrides your Plotly preferences"
  },
  {
    "typeWidget": "plotlyRealTime",
    "name": "hideModeBar",
    "type": "boolean",
    "defaultValue": false,
    "description": "If true, hide Plotly widget Modebar"
  },
  {
    "typeWidget": "vegaGeneric",
    "name": "inheritWidthAndHeight",
    "type": "boolean",
    "defaultValue": true,
    "description": "Inherits widget width and length from the parent container, overriding the width and height properties of the grammar of graphics"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "geoJson",
    "type": "object",
    "defaultValue": {
      "numberOfLayers": 1
    },
    "description": "Defines the number of layers with geojson"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "choropleth",
    "type": "object",
    "defaultValue": {
      "numberOfLayers": 0
    },
    "description": "Defines the number of layers with choropleth"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "heatMap",
    "type": "object",
    "defaultValue": {
      "numberOfLayers": 0,
      "sampledDisplay": false,
      "densityHeatMap": false
    },
    "description": "Heatmap object description"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "lineHeatMap",
    "type": "object",
    "defaultValue": {
      "numberOfLayers": 0
    },
    "description": "Defines the number of layers with line heatmap"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "imageOverlay",
    "type": "object",
    "defaultValue": {
      "numberOfLayers": 0
    },
    "description": "Defines the number of layers with images"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "svgOverlay",
    "type": "object",
    "defaultValue": {
      "numberOfLayers": 0
    },
    "description": "Defines the number of layers with svg images"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "defaultCenter",
    "type": "object",
    "defaultValue": {
      "latitude": 48.872063,
      "longitude": 2.331773,
      "zoom": 16
    },
    "description": "Defines the default center and zoom of the map"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "offlineSupport",
    "type": "boolean",
    "defaultValue": false,
    "description": "Provides support for storing map tiles into the current browser local storage. This allows the map to be used offline. The map will be stored in the browser local storage and will be available even if the user closes the browser. Select the geographic area and click the save button to store the tiles."
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "tileServer",
    "type": "string",
    "defaultValue": "MapboxStreets",
    "description": "Map tile provider. Possible values: MapboxStreets, MapboxDark, HereSatelliteDay, HereTerrainDay, HereHybridDay"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "drawingFeatures",
    "type": "boolean",
    "defaultValue": false,
    "description": "When set to true, it allows the user to manually select points, lines, rectangles or polygone regions in the map. The user can also delete the selected features. The selected features can be saved in a variable conntected to the selectedGeoJson actuator"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "drawingFeaturesOptions",
    "type": "object",
    "defaultValue": {
      "point": true,
      "line": true,
      "polygon": true,
      "rectangle": true,
      "modal": false
    },
    "description": "Defines the available drawing features"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "captureClickEvent",
    "type": "boolean",
    "defaultValue": false,
    "description": "Enables the click event capture. Returns a lat/lng object to the connected variable to the selectedPoint actuator"
  },
  {
    "typeWidget": "openStreetMaps",
    "name": "markerCluster",
    "type": "boolean",
    "defaultValue": true,
    "description": "Enables the clustering of point markers"
  }
]

