{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to Chalk'it. Chalk'it ambition is to allow technicians, scientists or engineers, not specialists in web technologies, to build their own web applications based on the Python code, JavaScript code or web-services they develop.</p> <p></p> <p>For your first steps, follow the Quickstart tutorial.</p>"},{"location":"basics/","title":"Basics","text":"<p>Chalk'it features a synchronous/reactive real-time and multi-rhythm execution engine, which is the \u201cleader orchestra\u201d of the execution of calculations and interactions. It also features an intuitive designer dashboards by simple drag&amp;drop.</p> <p>The development of a web-application with Chalk'it is based on the following concepts:</p> <ul> <li>Workspace: Concept analogous to the workspace of Matlab or IPython. It contains JSON or Python objects that have a given state and are accessible to other tool entities.</li> <li>DataNode: Concept analogous to a cell of a Notebook Jupyter. It can be seen as a function which should produce a JSON result. DataNodes can also have an execution period.</li> <li>\u201cdataNodes\u201d keyword: Concept for creating a dataflow between dataNodes (aka nodes). It is used inside a script-like DataNode to express a data and execution dependency with a predecessor node.</li> <li>Execution graph: Dependency relationships defined by the \u201cdataNodes\u201d keyword that organize the application logic. User actions on widgets trigger the execution of the concerned dataflow.</li> <li>Widget: Graphic object defined by a rectangle in the HTML page for User interface. It interacts with the workspace via connection points called actuators. Actions are as diverse as clicking a button, entering text or numeric values, scrolling cursors, selecting items from drop-down lists. Widgets allow complex visualizations thanks to the integrated libraries, such as Plotly.js, Charts or Plotly and Matplotlib (both Python). Methods for visualizing data on maps based on Leaflet.js are also added.</li> <li>Connection: Notion defining the link between a widget (via its actuator) and a DataNode.</li> <li>Document: JSON document describing the whole working model including the Chalk'it dashboard. The document has the extension xprjson, and is similar to the ipynb format of Jupyter notebooks.</li> <li>Page: The result of the xprjson document is an HTML page that contains the dashboard. This page is the web application. It can be hosted on a static page server and shared thanks to its link to considerably facilitate exchanges. A Chalk'it page is an HTML file which includes the xprjson document file and its associated JavaScript and CSS runtime libraries.</li> </ul>"},{"location":"chalkitapi/","title":"Chalk'it APIs","text":"<p>Chalk'it offers a set of APIs through chalkit that address several primary functionalities:</p> <ul> <li>Scheduler APIs: Facilitate the scheduling process by enabling the modification of dataNode variables and triggering the scheduler.</li> <li>Dashboard APIs: Support the developpement of multi-dashboard applications and widget display.</li> <li>Notification APIs: Enable the creation, management, and delivery of real-time alerts and updates to users supporting both blocking (popup) and non-blocking notifications.</li> <li>Datanode IOs</li> </ul>"},{"location":"chalkitapi/#javascript","title":"JavaScript","text":""},{"location":"chalkitapi/#scheduler-features","title":"Scheduler features","text":"<p>The main feature allows the setting of dataNode variables in a script, replicating the behavior of a user interacting with a basic input/control widget.</p> <p>The assessment of these functions is handled at the end of the current scheduling instance.</p>"},{"location":"chalkitapi/#setvariable","title":"setVariable","text":"<pre><code>chalkit.scheduler.setVariable(dataNodeName, dataNodeValue);\n</code></pre> <p>This API assigns the value dataNodeValue to the dataNode identified by dataNode[\"dataNodeName\"].</p> <ul> <li>dataNodeName (string): The name of the dataNode.</li> <li>dataNodeValue: The value to be assigned to the dataNode, which can be any JavaScript primitive type (number, string, boolean), array or JSON.</li> </ul> <p>For example, to update the following dataNode named info_person:</p> <pre><code>{\n  \"name\": \"John Doe\",\n  \"age\": \"30\"\n}\n</code></pre> <p>Use this code:</p> <pre><code>chalkit.scheduler.setVariable(\"info_person\", {\"name\": \"Jane Doe\",\"age\": \"25\"});\n</code></pre>"},{"location":"chalkitapi/#setvariableproperty","title":"setVariableProperty","text":"<pre><code>chalkit.scheduler.setVariableProperty(dataNodeName, propertyPath, dataNodeValue);\n</code></pre> <p>This API allows to modify a specific property within a dataNode (not the entire dataNode). It assigns the value dataNodeValue to the specified property path: dataNode[\"dataNodeName\"].propertyPath.</p> <ul> <li>dataNodeName (string): The name of the dataNode.</li> <li>propertyPath (array|string): The path to the property to be modified, supporting nested structures.</li> <li>dataNodeValue: The value to be set to the dataNode property, can be of any JavaScript primitive type (number, string, boolean), array or JSON.</li> </ul> <p>For example, given this dataNode named info_address:</p> <pre><code>{\n  \"name\": \"personal address\",\n  \"address\": {\n    \"city\": \"New York\",\n    \"details\":{\n      \"street\": \"123 Main St\",\n      \"zipCode\": \"10001\",\n      \"country\": \"USA\"\n    }\n  }\n}\n</code></pre> <p>To update the value of the street property in the nested structure within info_address, you can use the following code:</p> <pre><code>chalkit.scheduler.setVariableProperty(\"info_person\", [\"address\",\"details\",\"street\"], \"West 23rd Street\");\n</code></pre>"},{"location":"chalkitapi/#setvariables","title":"setVariables","text":"<pre><code>chalkit.scheduler.setVariables(dataNodeNames, dataNodeValues);\n</code></pre> <p>This API sets each value dataNodeValues[i] to dataNode[\"dataNodeNames[i]\"], where i:0 .. length-1 of dataNodeNames.</p> <ul> <li>dataNodeNames (array): An array of dataNode names.</li> <li>dataNodeValues (array): An array of values, matching the order and size of dataNodeNames.</li> </ul> <p>For example, to update info_person and another dataNode info_gender:</p> <pre><code>{\"gender\": \"male\"}\n</code></pre> <p>you can use the following code:</p> <pre><code>chalkit.scheduler.setVariables([\"info_person\",\"info_gender\"], [{\"name\": \"Jane Doe\",\"age\": \"25\"},{\"gender\": \"female\"}]);\n</code></pre>"},{"location":"chalkitapi/#executedatanode","title":"executeDataNode","text":"<pre><code>chalkit.scheduler.executeDataNode(dataNodeName);\n</code></pre> <p>This API triggers the scheduler with the source node identified as dataNodeName (the name of the dataNode that must be a string).</p> <p>This functionality can be useful for a dataNode with explicit trigger flag set to true. Its execution can be explicitly triggered by this API, in addition to being triggered by an associated push button widget or by clicking on the dataNode update icon  present in the dataNodes list.</p>"},{"location":"chalkitapi/#executedatanodes","title":"executeDataNodes","text":"<pre><code>chalkit.scheduler.executeDataNodes(dataNodeNames);\n</code></pre> <p>This API is similar to executeDataNode, except it launches the schedule with multiple source nodes defined in the dataNodeNames array, where each name is represented as a string.</p>"},{"location":"chalkitapi/#dashboard-features","title":"Dashboard features","text":"<p>The main feature allow navigation between Chalk'it pages with parameter transfer. When landing at the target page, specified dataNodes of type Variable can have their initial values modified, as described below.</p>"},{"location":"chalkitapi/#gotopage","title":"goToPage","text":"<p>In constrained dashboard mode, the method:</p> <pre><code>chalkit.dashboard.goToPage(pageNumber)\n</code></pre> <p>allows to show only the targed page. It is the main method for building multi-page app with custom navigation control.</p> <ul> <li>pageNumber (number): The target page number.</li> </ul>"},{"location":"chalkitapi/#viewpage","title":"viewPage","text":"<pre><code>chalkit.dashboard.viewPage(pageUrl, inputVals, bNewTab)\n</code></pre> <p>Navigates to pageUrl, setting the values of the specified dataNodes in inputVals.</p> <ul> <li>pageUrl (string): The URL of the target page.</li> <li>inputVals (array): An array of objects with structure.</li> </ul> <pre><code>{\"dsName\": \"dataNodeName\", \"dsVal\" : \"dataNodeValue\"}\n</code></pre> <p>dsName should be of type string. dsVal can be of any JavaScript primitive type (number, string, boolean), array or JSON.</p> <ul> <li>bNewTab (boolean): Opens the page in a new tab if true.</li> </ul>"},{"location":"chalkitapi/#viewproject","title":"viewProject","text":"<p>Similar to view page, but applies for projects.</p> <pre><code>chalkit.dashboard.viewProject(projectUrl, inputVals, bNewTab)\n</code></pre>"},{"location":"chalkitapi/#hidewidget","title":"hideWidget","text":"<pre><code>chalkit.dashboard.hideWidget(widgetName)\n</code></pre> <p>Hides the display of the widget.</p> <ul> <li>widgetName (string): The name of the widget, which can be obtained by hovering over the widget target, in the edit mode. The widget is visible by default.</li> </ul>"},{"location":"chalkitapi/#showwidget","title":"showWidget","text":"<pre><code>chalkit.dashboard.showWidget(widgetName)\n</code></pre> <p>Makes the display of the widget visible.</p>"},{"location":"chalkitapi/#disablewidget","title":"disableWidget","text":"<pre><code>chalkit.dashboard.disableWidget(widgetName)\n</code></pre> <p>Disables the interaction with a widget. The widget is enabled by default.</p>"},{"location":"chalkitapi/#enablewidget","title":"enableWidget","text":"<pre><code>chalkit.dashboard.enableWidget(widgetName)\n</code></pre> <p>Enables the interaction with a widget.</p>"},{"location":"chalkitapi/#notification-features","title":"Notification features","text":"<p>These features facilitate the creation and delivery of blocking and non-blocking notifications, supporting various types such as error, success, info, and warning.</p>"},{"location":"chalkitapi/#swalert","title":"swalert","text":"<pre><code>chalkit.notification.swalert(title, message, type)\n</code></pre> <p>Creates and displays a blocking notification using the SweetAlert library:</p> <p></p> <ul> <li>title (string): The title of the notification.</li> <li>message (string): The content of the notification message.</li> <li>type (string): The type of the notification. Accepted values are \"error\", \"success\", \"warning\", or \"info\".</li> </ul>"},{"location":"chalkitapi/#notify","title":"notify","text":"<pre><code>chalkit.notification.notify(dataNodeName, message, type)\n</code></pre> <p>Creates and displays a non-blocking notification, which will appear in the notification window under the bell icon :</p> <p></p> <ul> <li>dataNodeName (string): The name of the associated dataNode. If dataNodeName is undefined or an empty string, the script source where the API is called will be used as the default.</li> <li>message (string): The content of the notification message.</li> <li>type (string): The type of the notification. Accepted values are \"error\", \"success\", \"warning\", or \"info\".</li> </ul>"},{"location":"chalkitapi/#python","title":"Python","text":"<p>The Python API deals with input and outputs for Python scripts and also offers a port of the JavaScript API to interact with the scheduler and the dashboard.</p>"},{"location":"chalkitapi/#inputouputs-helpers","title":"Input/ouputs helpers","text":"<p>An instance of <code>ChalkitApi</code> is provided to user scripts as <code>chalkit</code>. It can be used by scripts to interact  with Chalk'it.</p> <p>Aside from utility fonctions, it provides a set of methods to build the script's output. The <code>output</code> method can be used as an alternative to a return statement. If called multiple times the results will be combined as a JSON array or object.</p> <p>As Chalk'it can only handle JSON data, any returned python object will be converted according to a set of heuristics. Lists, dicts, string and numbers will be directly mapped to their JSON equivalent; Plots from known libraries will be converted to images (preferably SVG); etc. As a last resort, the object will be pickled and sent as binary data. If this fails, an error is raised.</p> <p>The <code>as_*</code> methods can be used to force the results to use a specific conversion:</p> <pre><code>dataframe = compute_my_data()\nreturn [chalkit.as_json(dataframe), chalkit.as_python(dataframe)]\n</code></pre> <p>The <code>output_*</code> methods a juste conveniences to return a converted value. <code>chalkit.output_json(dataframe)</code> is the same as <code>chalkit.output(chalkit.as_json(dataframe))</code>.</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>class ChalkitApi:\n    \"\"\"An instance of `ChalkitApi` is provided to user scripts as `chalkit`. It can be used by scripts to interact\n     with Chalk'it.\n\n    Aside from utility fonctions, it provides a set of methods to build the script's output. The `output` method\n    can be used as an alternative to a return statement. If called multiple times the results will be combined as a\n    JSON array or object.\n\n    As Chalk'it can only handle JSON data, any returned python object will be converted according to a set of\n    heuristics. Lists, dicts, string and numbers will be directly mapped to their JSON equivalent; Plots from known\n    libraries will be converted to images (preferably SVG); etc. As a last resort, the object will be pickled and sent\n    as binary data. If this fails, an error is raised.\n\n    The `as_*` methods can be used to force the results to use a specific conversion:\n\n        dataframe = compute_my_data()\n        return [chalkit.as_json(dataframe), chalkit.as_python(dataframe)]\n\n    The `output_*` methods a juste conveniences to return a converted value. `chalkit.output_json(dataframe)` is the\n    same as `chalkit.output(chalkit.as_json(dataframe))`.\n\n    \"\"\"\n\n    def __init__(self, state: ChalkitState):\n        self._state = state\n        self._scheduler = SchedulerActions(state)\n        self._dashboard = DashboardActions(state)\n        self._notification = NotificationActions(state)\n\n    @property\n    def scheduler(self) -&gt; SchedulerActions:\n        return self._scheduler\n\n    @property\n    def dashboard(self) -&gt; DashboardActions:\n        return self._dashboard\n\n    @property\n    def notification(self) -&gt; NotificationActions:\n        return self._notification\n\n    @staticmethod\n    def base64_to_bytes(b64: str) -&gt; bytes:\n        \"\"\"Reverts data encoded as a string using base 64 to raw `bytes`.\n\n        All binary data moved around as JSON in Chalk'it is encoded as base 64 strings. This method is provided\n        as an easy way to get the data back into a binary form.\n\n        Parameters:\n            b64: the base64 encoded string\n\n        Returns:\n            the decoded raw binary data\n        \"\"\"\n        from base64 import standard_b64decode\n\n        return standard_b64decode(b64)\n\n    @staticmethod\n    def as_json(value: Any) -&gt; OutputAdapter:\n        \"\"\"\n        This method instructs Chalk'it to convert a result to a JSON representation.\n\n        Note:\n            Technically, all data is ultimately converted to JSON. But using a plotly plot as an example, this method\n            will output the plot's JSON configuration, whereas `as_image` would return an image of the plot encoded\n            into JSON using base64.\n\n        Args:\n            value: a return value for the script\n\n        Returns:\n            `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n             but returned as it is.\n        \"\"\"\n        return JsonAdapter(value)\n\n    @staticmethod\n    def as_python(value: Any) -&gt; OutputAdapter:\n        \"\"\"\n        This method instructs Chalk'it to pickle a result, the main use case being moving Python objects from a\n        Python datanode to another.\n\n        The JSON encoding used will be recognized if the value is used in another Python datanode and the object will\n        be automatically un-pickled, meaning `dataNodes[\"previous-python-node\"]` will directly evaluate to the\n        un-pickled object.\n\n        Args:\n            value: a return value for the script\n\n        Returns:\n            `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n             but returned as it is.\n        \"\"\"\n        return PythonAdapter(value)\n\n    @staticmethod\n    def as_image(value: Any) -&gt; OutputAdapter:\n        \"\"\"\n        This method instructs Chalk'it to convert the result (like a plot figure) into an image.\n\n        Args:\n            value: a return value for the script\n\n        Returns:\n            `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n             but returned as it is.\n        \"\"\"\n        return ImageAdapter(value)\n\n    @staticmethod\n    def as_data(value: Any, mime_type: Optional[str] = None, name: Optional[str] = None) -&gt; OutputAdapter:\n        \"\"\"\n        This method instructs Chalk'it to output the result as binary data using its JSON convention.\n\n        Object of known types, like numpy arrays, will be saved as binary data. This behavior is very discretionary.\n\n        The most obvious use case is returning raw data from `bytes` or a `BytesIO` using Chalk'it conventions, with\n        the possibility to attach a MIME type.\n\n        The resulting JSON looks like:\n\n            {\n              \"content\": \"ZHJncnNk\",\n              \"isBinary\": true,\n              \"type\": \"application/octet-stream\",\n              \"name\": \"my_file.bin\"\n            }\n\n        Only the first two fields are guarantied / necessary. The `type` is a MIME type and help datanodes and widgets\n        handle the data. The `name` is often an original filename and may be used when downloading the content\n        as a file.\n\n        Args:\n            value: a return value for the script\n            mime_type: A MIME type to be added to the resulting JSON object.\n            name: a name (usually a file name) to be added to the resulting JSON object.\n\n        Returns:\n            `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n             but returned as it is.\n        \"\"\"\n        return DataAdapter(value, mime_type, name)\n\n    def output(self, value: Any, key: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Provides an alternative way to return data, as opposed to the `return` statement.\n\n        Multiple calls build an array; using keys yield an object:\n\n            # Equivalent simple returns\n            chalkit.output(42)\n            # Or\n            return 42\n\n            # Equivalent array returns\n            chalkit.output(1)\n            chalkit.output(2)\n            chalkit.output(3)\n            # Or\n            return [1, 2, 3]\n\n            # Equivalent object returns\n            chalkit.output(1, key=\"a\")\n            chalkit.output(2, key=\"b\")\n            # Or\n            return {\"a\": 1, \"b\": 2}\n\n        Mixing `output` and `return` is an error, as is using `output` with and without keys.\n\n        Args:\n            value: a return value for the script\n            key: if provided, attach `value` as the `key` attribute of a JSON object.\n        \"\"\"\n        self._state.add_output(value, key)\n\n    def output_json(self, value: Any, key: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Same as `chalkit.output(chalkit.as_json(value), key)`.\n\n        Args:\n            value: a return value for the script\n            key:\n        \"\"\"\n        self._state.add_output(self.as_json(value), key)\n\n    def output_python(self, value: Any, key: Optional[str] = None) -&gt; None:\n        \"\"\"\n            Same as `chalkit.output(chalkit.as_python(value), key)`.\n\n        Args:\n            value: a return value for the script\n            key:\n        \"\"\"\n        self._state.add_output(self.as_python(value), key)\n\n    def output_image(self, value: Any, key: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Same as `chalkit.output(chalkit.as_image(value), key)`.\n\n        Args:\n            value: a return value for the script\n            key:\n        \"\"\"\n        self._state.add_output(self.as_image(value), key)\n\n    def output_data(self, value: Any, key: Optional[str] = None) -&gt; None:\n        \"\"\"\n        Same as `chalkit.output(chalkit.as_data(value), key)`.\n\n        Args:\n            value: a return value for the script\n            key:\n        \"\"\"\n        self._state.add_output(self.as_data(value), key)\n\n    def debug(self, value: Any) -&gt; None:\n        \"\"\"\n        Output debug information.\n\n        This method does nothing when not invoked while editing a script in the Python datanode editor. In the editor,\n        the `value` with be displayed as conveniently as possible. This is intended to be similar to a `print`, or more\n        accurately a `logger.debug(value)`, with some additional rendering, like images being displayed, etc.\n\n        Args:\n            value: the value to display\n        \"\"\"\n        self._state.add_debug(value)\n\n    def notify(self):\n        pass\n        # TODO\n</code></pre> <p>options: show_source: false heading_level: 4 show_signature_annotations: true show_object_full_path: false show_root_toc_entry: false separate_signature: true show_signature_annotations: false</p>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.as_data","title":"<code>as_data(value, mime_type=None, name=None)</code>  <code>staticmethod</code>","text":"<p>This method instructs Chalk'it to output the result as binary data using its JSON convention.</p> <p>Object of known types, like numpy arrays, will be saved as binary data. This behavior is very discretionary.</p> <p>The most obvious use case is returning raw data from <code>bytes</code> or a <code>BytesIO</code> using Chalk'it conventions, with the possibility to attach a MIME type.</p> <p>The resulting JSON looks like:</p> <pre><code>{\n  \"content\": \"ZHJncnNk\",\n  \"isBinary\": true,\n  \"type\": \"application/octet-stream\",\n  \"name\": \"my_file.bin\"\n}\n</code></pre> <p>Only the first two fields are guarantied / necessary. The <code>type</code> is a MIME type and help datanodes and widgets handle the data. The <code>name</code> is often an original filename and may be used when downloading the content as a file.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <code>mime_type</code> <code>Optional[str]</code> <p>A MIME type to be added to the resulting JSON object.</p> <code>None</code> <code>name</code> <code>Optional[str]</code> <p>a name (usually a file name) to be added to the resulting JSON object.</p> <code>None</code> <p>Returns:</p> Type Description <code>OutputAdapter</code> <p><code>value</code> either wrapped or converted. The returned object is not intended to be used by the user's script  but returned as it is.</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>@staticmethod\ndef as_data(value: Any, mime_type: Optional[str] = None, name: Optional[str] = None) -&gt; OutputAdapter:\n    \"\"\"\n    This method instructs Chalk'it to output the result as binary data using its JSON convention.\n\n    Object of known types, like numpy arrays, will be saved as binary data. This behavior is very discretionary.\n\n    The most obvious use case is returning raw data from `bytes` or a `BytesIO` using Chalk'it conventions, with\n    the possibility to attach a MIME type.\n\n    The resulting JSON looks like:\n\n        {\n          \"content\": \"ZHJncnNk\",\n          \"isBinary\": true,\n          \"type\": \"application/octet-stream\",\n          \"name\": \"my_file.bin\"\n        }\n\n    Only the first two fields are guarantied / necessary. The `type` is a MIME type and help datanodes and widgets\n    handle the data. The `name` is often an original filename and may be used when downloading the content\n    as a file.\n\n    Args:\n        value: a return value for the script\n        mime_type: A MIME type to be added to the resulting JSON object.\n        name: a name (usually a file name) to be added to the resulting JSON object.\n\n    Returns:\n        `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n         but returned as it is.\n    \"\"\"\n    return DataAdapter(value, mime_type, name)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.as_image","title":"<code>as_image(value)</code>  <code>staticmethod</code>","text":"<p>This method instructs Chalk'it to convert the result (like a plot figure) into an image.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <p>Returns:</p> Type Description <code>OutputAdapter</code> <p><code>value</code> either wrapped or converted. The returned object is not intended to be used by the user's script  but returned as it is.</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>@staticmethod\ndef as_image(value: Any) -&gt; OutputAdapter:\n    \"\"\"\n    This method instructs Chalk'it to convert the result (like a plot figure) into an image.\n\n    Args:\n        value: a return value for the script\n\n    Returns:\n        `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n         but returned as it is.\n    \"\"\"\n    return ImageAdapter(value)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.as_json","title":"<code>as_json(value)</code>  <code>staticmethod</code>","text":"<p>This method instructs Chalk'it to convert a result to a JSON representation.</p> <p>!!! note     Technically, all data is ultimately converted to JSON. But using a plotly plot as an example, this method     will output the plot's JSON configuration, whereas <code>as_image</code> would return an image of the plot encoded     into JSON using base64.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <p>Returns:</p> Type Description <code>OutputAdapter</code> <p><code>value</code> either wrapped or converted. The returned object is not intended to be used by the user's script  but returned as it is.</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>@staticmethod\ndef as_json(value: Any) -&gt; OutputAdapter:\n    \"\"\"\n    This method instructs Chalk'it to convert a result to a JSON representation.\n\n    Note:\n        Technically, all data is ultimately converted to JSON. But using a plotly plot as an example, this method\n        will output the plot's JSON configuration, whereas `as_image` would return an image of the plot encoded\n        into JSON using base64.\n\n    Args:\n        value: a return value for the script\n\n    Returns:\n        `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n         but returned as it is.\n    \"\"\"\n    return JsonAdapter(value)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.as_python","title":"<code>as_python(value)</code>  <code>staticmethod</code>","text":"<p>This method instructs Chalk'it to pickle a result, the main use case being moving Python objects from a Python datanode to another.</p> <p>The JSON encoding used will be recognized if the value is used in another Python datanode and the object will be automatically un-pickled, meaning <code>dataNodes[\"previous-python-node\"]</code> will directly evaluate to the un-pickled object.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <p>Returns:</p> Type Description <code>OutputAdapter</code> <p><code>value</code> either wrapped or converted. The returned object is not intended to be used by the user's script  but returned as it is.</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>@staticmethod\ndef as_python(value: Any) -&gt; OutputAdapter:\n    \"\"\"\n    This method instructs Chalk'it to pickle a result, the main use case being moving Python objects from a\n    Python datanode to another.\n\n    The JSON encoding used will be recognized if the value is used in another Python datanode and the object will\n    be automatically un-pickled, meaning `dataNodes[\"previous-python-node\"]` will directly evaluate to the\n    un-pickled object.\n\n    Args:\n        value: a return value for the script\n\n    Returns:\n        `value` either wrapped or converted. The returned object is not intended to be used by the user's script\n         but returned as it is.\n    \"\"\"\n    return PythonAdapter(value)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.base64_to_bytes","title":"<code>base64_to_bytes(b64)</code>  <code>staticmethod</code>","text":"<p>Reverts data encoded as a string using base 64 to raw <code>bytes</code>.</p> <p>All binary data moved around as JSON in Chalk'it is encoded as base 64 strings. This method is provided as an easy way to get the data back into a binary form.</p> <p>Parameters:</p> Name Type Description Default <code>b64</code> <code>str</code> <p>the base64 encoded string</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>the decoded raw binary data</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>@staticmethod\ndef base64_to_bytes(b64: str) -&gt; bytes:\n    \"\"\"Reverts data encoded as a string using base 64 to raw `bytes`.\n\n    All binary data moved around as JSON in Chalk'it is encoded as base 64 strings. This method is provided\n    as an easy way to get the data back into a binary form.\n\n    Parameters:\n        b64: the base64 encoded string\n\n    Returns:\n        the decoded raw binary data\n    \"\"\"\n    from base64 import standard_b64decode\n\n    return standard_b64decode(b64)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.debug","title":"<code>debug(self, value)</code>","text":"<p>Output debug information.</p> <p>This method does nothing when not invoked while editing a script in the Python datanode editor. In the editor, the <code>value</code> with be displayed as conveniently as possible. This is intended to be similar to a <code>print</code>, or more accurately a <code>logger.debug(value)</code>, with some additional rendering, like images being displayed, etc.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>the value to display</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def debug(self, value: Any) -&gt; None:\n    \"\"\"\n    Output debug information.\n\n    This method does nothing when not invoked while editing a script in the Python datanode editor. In the editor,\n    the `value` with be displayed as conveniently as possible. This is intended to be similar to a `print`, or more\n    accurately a `logger.debug(value)`, with some additional rendering, like images being displayed, etc.\n\n    Args:\n        value: the value to display\n    \"\"\"\n    self._state.add_debug(value)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.output","title":"<code>output(self, value, key=None)</code>","text":"<p>Provides an alternative way to return data, as opposed to the <code>return</code> statement.</p> <p>Multiple calls build an array; using keys yield an object:</p> <pre><code># Equivalent simple returns\nchalkit.output(42)\n# Or\nreturn 42\n\n# Equivalent array returns\nchalkit.output(1)\nchalkit.output(2)\nchalkit.output(3)\n# Or\nreturn [1, 2, 3]\n\n# Equivalent object returns\nchalkit.output(1, key=\"a\")\nchalkit.output(2, key=\"b\")\n# Or\nreturn {\"a\": 1, \"b\": 2}\n</code></pre> <p>Mixing <code>output</code> and <code>return</code> is an error, as is using <code>output</code> with and without keys.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <code>key</code> <code>Optional[str]</code> <p>if provided, attach <code>value</code> as the <code>key</code> attribute of a JSON object.</p> <code>None</code> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def output(self, value: Any, key: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Provides an alternative way to return data, as opposed to the `return` statement.\n\n    Multiple calls build an array; using keys yield an object:\n\n        # Equivalent simple returns\n        chalkit.output(42)\n        # Or\n        return 42\n\n        # Equivalent array returns\n        chalkit.output(1)\n        chalkit.output(2)\n        chalkit.output(3)\n        # Or\n        return [1, 2, 3]\n\n        # Equivalent object returns\n        chalkit.output(1, key=\"a\")\n        chalkit.output(2, key=\"b\")\n        # Or\n        return {\"a\": 1, \"b\": 2}\n\n    Mixing `output` and `return` is an error, as is using `output` with and without keys.\n\n    Args:\n        value: a return value for the script\n        key: if provided, attach `value` as the `key` attribute of a JSON object.\n    \"\"\"\n    self._state.add_output(value, key)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.output_data","title":"<code>output_data(self, value, key=None)</code>","text":"<p>Same as <code>chalkit.output(chalkit.as_data(value), key)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <code>key</code> <code>Optional[str]</code> <code>None</code> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def output_data(self, value: Any, key: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Same as `chalkit.output(chalkit.as_data(value), key)`.\n\n    Args:\n        value: a return value for the script\n        key:\n    \"\"\"\n    self._state.add_output(self.as_data(value), key)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.output_image","title":"<code>output_image(self, value, key=None)</code>","text":"<p>Same as <code>chalkit.output(chalkit.as_image(value), key)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <code>key</code> <code>Optional[str]</code> <code>None</code> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def output_image(self, value: Any, key: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Same as `chalkit.output(chalkit.as_image(value), key)`.\n\n    Args:\n        value: a return value for the script\n        key:\n    \"\"\"\n    self._state.add_output(self.as_image(value), key)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.output_json","title":"<code>output_json(self, value, key=None)</code>","text":"<p>Same as <code>chalkit.output(chalkit.as_json(value), key)</code>.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <code>key</code> <code>Optional[str]</code> <code>None</code> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def output_json(self, value: Any, key: Optional[str] = None) -&gt; None:\n    \"\"\"\n    Same as `chalkit.output(chalkit.as_json(value), key)`.\n\n    Args:\n        value: a return value for the script\n        key:\n    \"\"\"\n    self._state.add_output(self.as_json(value), key)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.ChalkitApi.output_python","title":"<code>output_python(self, value, key=None)</code>","text":"<pre><code>Same as `chalkit.output(chalkit.as_python(value), key)`.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>a return value for the script</p> required <code>key</code> <code>Optional[str]</code> <code>None</code> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def output_python(self, value: Any, key: Optional[str] = None) -&gt; None:\n    \"\"\"\n        Same as `chalkit.output(chalkit.as_python(value), key)`.\n\n    Args:\n        value: a return value for the script\n        key:\n    \"\"\"\n    self._state.add_output(self.as_python(value), key)\n</code></pre>"},{"location":"chalkitapi/#scheduler-interactions","title":"Scheduler interactions","text":"<p>This class provides a port of the javascript API. An instance of it is provided to user scripts as <code>chalkit.scheduler</code>. It allows some interactions with the dashboard's scheduler. Use with caution as these introduce side effects to data nodes executions. Be especially mindful of not creating update cycles.</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>class SchedulerActions:\n    \"\"\"\n    This class provides a port of the javascript API. An instance of it is provided to user scripts as\n    `chalkit.scheduler`. It allows some interactions with the dashboard's scheduler. Use with caution as these\n    introduce side effects to data nodes executions. Be especially mindful of not creating update cycles.\n    \"\"\"\n\n    def __init__(self, state: ChalkitState):\n        self._state = state\n\n    def set_variable(self, datanode_name: str, json_value: JSON) -&gt; None:\n        \"\"\"\n        Update the value of a dataNode.\n\n        The change happens at the end of the evaluation of the current dataNode. This may trigger the re-evaluation\n        of downstream dataNodes. Most dataNodes that are not `Variable` can't be updated.\n\n        Args:\n            datanode_name: the name of the dataNode\n            json_value: the new value, must convert to JSON\n        \"\"\"\n        self.set_variables({datanode_name: json_value})\n\n    def set_variables(self, datanodes_values: dict[str, JSON]) -&gt; None:\n        \"\"\"\n        Update the value of multiple dataNodes (see `set_variable`).\n\n        Args:\n            datanodes_values: dictionary mapping dataNode names to their new values. Values must convert to JSON.\n        \"\"\"\n        self._state.add_side_effect(\"scheduler.setVariables\", datanodes_values)\n\n    def set_variable_property(self, datanode_name: str, property_path: PropertyPath, json_value: JSON) -&gt; None:\n        \"\"\"\n        Update part of the value of a dataNode (see `set_variable`).\n\n        See the javascript version for more details.\n\n        Args:\n            datanode_name: the name of the dataNode\n            property_path: Path in the old value where to set the new value. Sequence of strings (object keys) and\n                           integers (array index).\n            json_value: the new value to insert, must convert to JSON\n\n        \"\"\"\n        self._state.add_side_effect(\"scheduler.setVariableProperty\", datanode_name, property_path, json_value)\n\n    def execute_datanode(self, datanode_name: str) -&gt; None:\n        \"\"\"\n        Schedules the evaluation of a dataNode.\n\n        This is mostly meant for dataNodes with the explicit trigger flag. This will cascade to downstream dataNodes.\n        Args:\n            datanode_name: the name of the dataNode\n        \"\"\"\n        self.execute_datanodes([datanode_name])\n\n    def execute_datanodes(self, datanode_names: list[str]) -&gt; None:\n        \"\"\"\n        Schedules the evaluation of multiple dataNodes (see `execute_datanode).\n\n        Args:\n            datanode_names: the names of a group of dataNodes\n        \"\"\"\n        self._state.add_side_effect(\"scheduler.executeDataNodes\", datanode_names)\n</code></pre> <p>options: show_source: false heading_level: 4 show_signature_annotations: true show_object_full_path: false show_root_toc_entry: false separate_signature: true show_signature_annotations: false</p>"},{"location":"chalkitapi/#chalkit_python_api.public_api.SchedulerActions.execute_datanode","title":"<code>execute_datanode(self, datanode_name)</code>","text":"<p>Schedules the evaluation of a dataNode.</p> <p>This is mostly meant for dataNodes with the explicit trigger flag. This will cascade to downstream dataNodes.</p> <p>Parameters:</p> Name Type Description Default <code>datanode_name</code> <code>str</code> <p>the name of the dataNode</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def execute_datanode(self, datanode_name: str) -&gt; None:\n    \"\"\"\n    Schedules the evaluation of a dataNode.\n\n    This is mostly meant for dataNodes with the explicit trigger flag. This will cascade to downstream dataNodes.\n    Args:\n        datanode_name: the name of the dataNode\n    \"\"\"\n    self.execute_datanodes([datanode_name])\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.SchedulerActions.execute_datanodes","title":"<code>execute_datanodes(self, datanode_names)</code>","text":"<p>Schedules the evaluation of multiple dataNodes (see `execute_datanode).</p> <p>Parameters:</p> Name Type Description Default <code>datanode_names</code> <code>list[str]</code> <p>the names of a group of dataNodes</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def execute_datanodes(self, datanode_names: list[str]) -&gt; None:\n    \"\"\"\n    Schedules the evaluation of multiple dataNodes (see `execute_datanode).\n\n    Args:\n        datanode_names: the names of a group of dataNodes\n    \"\"\"\n    self._state.add_side_effect(\"scheduler.executeDataNodes\", datanode_names)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.SchedulerActions.set_variable","title":"<code>set_variable(self, datanode_name, json_value)</code>","text":"<p>Update the value of a dataNode.</p> <p>The change happens at the end of the evaluation of the current dataNode. This may trigger the re-evaluation of downstream dataNodes. Most dataNodes that are not <code>Variable</code> can't be updated.</p> <p>Parameters:</p> Name Type Description Default <code>datanode_name</code> <code>str</code> <p>the name of the dataNode</p> required <code>json_value</code> <code>Any</code> <p>the new value, must convert to JSON</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def set_variable(self, datanode_name: str, json_value: JSON) -&gt; None:\n    \"\"\"\n    Update the value of a dataNode.\n\n    The change happens at the end of the evaluation of the current dataNode. This may trigger the re-evaluation\n    of downstream dataNodes. Most dataNodes that are not `Variable` can't be updated.\n\n    Args:\n        datanode_name: the name of the dataNode\n        json_value: the new value, must convert to JSON\n    \"\"\"\n    self.set_variables({datanode_name: json_value})\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.SchedulerActions.set_variable_property","title":"<code>set_variable_property(self, datanode_name, property_path, json_value)</code>","text":"<p>Update part of the value of a dataNode (see <code>set_variable</code>).</p> <p>See the javascript version for more details.</p> <p>Parameters:</p> Name Type Description Default <code>datanode_name</code> <code>str</code> <p>the name of the dataNode</p> required <code>property_path</code> <code>list[Union[int, str]]</code> <p>Path in the old value where to set the new value. Sequence of strings (object keys) and            integers (array index).</p> required <code>json_value</code> <code>Any</code> <p>the new value to insert, must convert to JSON</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def set_variable_property(self, datanode_name: str, property_path: PropertyPath, json_value: JSON) -&gt; None:\n    \"\"\"\n    Update part of the value of a dataNode (see `set_variable`).\n\n    See the javascript version for more details.\n\n    Args:\n        datanode_name: the name of the dataNode\n        property_path: Path in the old value where to set the new value. Sequence of strings (object keys) and\n                       integers (array index).\n        json_value: the new value to insert, must convert to JSON\n\n    \"\"\"\n    self._state.add_side_effect(\"scheduler.setVariableProperty\", datanode_name, property_path, json_value)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.SchedulerActions.set_variables","title":"<code>set_variables(self, datanodes_values)</code>","text":"<p>Update the value of multiple dataNodes (see <code>set_variable</code>).</p> <p>Parameters:</p> Name Type Description Default <code>datanodes_values</code> <code>dict[str, Any]</code> <p>dictionary mapping dataNode names to their new values. Values must convert to JSON.</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def set_variables(self, datanodes_values: dict[str, JSON]) -&gt; None:\n    \"\"\"\n    Update the value of multiple dataNodes (see `set_variable`).\n\n    Args:\n        datanodes_values: dictionary mapping dataNode names to their new values. Values must convert to JSON.\n    \"\"\"\n    self._state.add_side_effect(\"scheduler.setVariables\", datanodes_values)\n</code></pre>"},{"location":"chalkitapi/#dashboard-interactions","title":"Dashboard interactions","text":"<p>This class provides a port of the javascript API. An instance of it is provided to user scripts as <code>chalkit.dashboard</code>. It allows some interactions with the dashboard. Use with caution as these introduce side effects to data nodes executions.</p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>class DashboardActions:\n    \"\"\"\n    This class provides a port of the javascript API. An instance of it is provided to user scripts as\n    `chalkit.dashboard`. It allows some interactions with the dashboard. Use with caution as these introduce side\n    effects to data nodes executions.\n    \"\"\"\n\n    def __init__(self, state: ChalkitState):\n        self._state = state\n\n    def view_page(self, page_url: str, input_vals: Optional[ParamValues] = None, new_tab=False) -&gt; None:\n        \"\"\"\n        Navigates to pageUrl, setting the values of the specified dataNodes in inputVals.\n\n        Args:\n            page_url: target page URL\n            input_vals: optional array of structures of type `{\"dsName\": \"dataNodeName\", \"dsVal\" : \"dataNodeValue\"}`.\n                        `dsName` must be a string. `dsVal` must convert to JSON.\n            new_tab: open in new tab when true\n        \"\"\"\n        self._state.add_side_effect(\"dashboard.viewPage\", page_url, input_vals, new_tab)\n\n    def view_project(self, project_url: str, input_vals: Optional[ParamValues] = None, new_tab=False) -&gt; None:\n        \"\"\"\n        Similar to `view_page`, but for projects.\n\n        Args:\n            project_url: URL of an xprjson file\n            input_vals:\n            new_tab: open in new tab when true\n        \"\"\"\n        self._state.add_side_effect(\"dashboard.viewProject\", project_url, input_vals, new_tab)\n\n    def go_to_page(self, num_page: int) -&gt; None:\n        \"\"\"\n        Changes the current page in constrained dashboard mode.\n\n        Args:\n            num_page: the page to display\n        \"\"\"\n        self._state.add_side_effect(\"dashboard.goToPage\", num_page)\n\n    def enable_widget(self, widget_name: str) -&gt; None:\n        \"\"\"\n        (re)enables a widget, making it interactive.\n\n        Args:\n            widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n        \"\"\"\n        self._state.add_side_effect(\"dashboard.enableWidget\", widget_name)\n\n    def disable_widget(self, widget_name: str) -&gt; None:\n        \"\"\"\n        Disables a widget, making it non-interactive. All widgets are initially enabled.\n\n        Args:\n            widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n        \"\"\"\n        self._state.add_side_effect(\"dashboard.disableWidget\", widget_name)\n\n    def show_widget(self, widget_name: str) -&gt; None:\n        \"\"\"\n        Makes a widget visible. All widgets are initially visible.\n\n        Args:\n            widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n        \"\"\"\n        self._state.add_side_effect(\"dashboard.showWidget\", widget_name)\n\n    def hide_widget(self, widget_name: str) -&gt; None:\n        \"\"\"\n        Hides a widget. All widgets are initially visible.\n\n        Args:\n            widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n        \"\"\"\n        self._state.add_side_effect(\"dashboard.hideWidget\", widget_name)\n</code></pre> <p>options: show_source: false heading_level: 4 show_signature_annotations: true show_object_full_path: false show_root_toc_entry: false separate_signature: true show_signature_annotations: false</p>"},{"location":"chalkitapi/#chalkit_python_api.public_api.DashboardActions.disable_widget","title":"<code>disable_widget(self, widget_name)</code>","text":"<p>Disables a widget, making it non-interactive. All widgets are initially enabled.</p> <p>Parameters:</p> Name Type Description Default <code>widget_name</code> <code>str</code> <p>the name of a widget (can be obtained by hovering over a widget in the edit mode)</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def disable_widget(self, widget_name: str) -&gt; None:\n    \"\"\"\n    Disables a widget, making it non-interactive. All widgets are initially enabled.\n\n    Args:\n        widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n    \"\"\"\n    self._state.add_side_effect(\"dashboard.disableWidget\", widget_name)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.DashboardActions.enable_widget","title":"<code>enable_widget(self, widget_name)</code>","text":"<p>(re)enables a widget, making it interactive.</p> <p>Parameters:</p> Name Type Description Default <code>widget_name</code> <code>str</code> <p>the name of a widget (can be obtained by hovering over a widget in the edit mode)</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def enable_widget(self, widget_name: str) -&gt; None:\n    \"\"\"\n    (re)enables a widget, making it interactive.\n\n    Args:\n        widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n    \"\"\"\n    self._state.add_side_effect(\"dashboard.enableWidget\", widget_name)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.DashboardActions.go_to_page","title":"<code>go_to_page(self, num_page)</code>","text":"<p>Changes the current page in constrained dashboard mode.</p> <p>Parameters:</p> Name Type Description Default <code>num_page</code> <code>int</code> <p>the page to display</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def go_to_page(self, num_page: int) -&gt; None:\n    \"\"\"\n    Changes the current page in constrained dashboard mode.\n\n    Args:\n        num_page: the page to display\n    \"\"\"\n    self._state.add_side_effect(\"dashboard.goToPage\", num_page)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.DashboardActions.hide_widget","title":"<code>hide_widget(self, widget_name)</code>","text":"<p>Hides a widget. All widgets are initially visible.</p> <p>Parameters:</p> Name Type Description Default <code>widget_name</code> <code>str</code> <p>the name of a widget (can be obtained by hovering over a widget in the edit mode)</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def hide_widget(self, widget_name: str) -&gt; None:\n    \"\"\"\n    Hides a widget. All widgets are initially visible.\n\n    Args:\n        widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n    \"\"\"\n    self._state.add_side_effect(\"dashboard.hideWidget\", widget_name)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.DashboardActions.show_widget","title":"<code>show_widget(self, widget_name)</code>","text":"<p>Makes a widget visible. All widgets are initially visible.</p> <p>Parameters:</p> Name Type Description Default <code>widget_name</code> <code>str</code> <p>the name of a widget (can be obtained by hovering over a widget in the edit mode)</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def show_widget(self, widget_name: str) -&gt; None:\n    \"\"\"\n    Makes a widget visible. All widgets are initially visible.\n\n    Args:\n        widget_name: the name of a widget (can be obtained by hovering over a widget in the edit mode)\n    \"\"\"\n    self._state.add_side_effect(\"dashboard.showWidget\", widget_name)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.DashboardActions.view_page","title":"<code>view_page(self, page_url, input_vals=None, new_tab=False)</code>","text":"<p>Navigates to pageUrl, setting the values of the specified dataNodes in inputVals.</p> <p>Parameters:</p> Name Type Description Default <code>page_url</code> <code>str</code> <p>target page URL</p> required <code>input_vals</code> <code>Optional[list[chalkit_python_api.public_api.ParamValue]]</code> <p>optional array of structures of type <code>{\"dsName\": \"dataNodeName\", \"dsVal\" : \"dataNodeValue\"}</code>.         <code>dsName</code> must be a string. <code>dsVal</code> must convert to JSON.</p> <code>None</code> <code>new_tab</code> <p>open in new tab when true</p> <code>False</code> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def view_page(self, page_url: str, input_vals: Optional[ParamValues] = None, new_tab=False) -&gt; None:\n    \"\"\"\n    Navigates to pageUrl, setting the values of the specified dataNodes in inputVals.\n\n    Args:\n        page_url: target page URL\n        input_vals: optional array of structures of type `{\"dsName\": \"dataNodeName\", \"dsVal\" : \"dataNodeValue\"}`.\n                    `dsName` must be a string. `dsVal` must convert to JSON.\n        new_tab: open in new tab when true\n    \"\"\"\n    self._state.add_side_effect(\"dashboard.viewPage\", page_url, input_vals, new_tab)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.DashboardActions.view_project","title":"<code>view_project(self, project_url, input_vals=None, new_tab=False)</code>","text":"<p>Similar to <code>view_page</code>, but for projects.</p> <p>Parameters:</p> Name Type Description Default <code>project_url</code> <code>str</code> <p>URL of an xprjson file</p> required <code>input_vals</code> <code>Optional[list[chalkit_python_api.public_api.ParamValue]]</code> <code>None</code> <code>new_tab</code> <p>open in new tab when true</p> <code>False</code> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def view_project(self, project_url: str, input_vals: Optional[ParamValues] = None, new_tab=False) -&gt; None:\n    \"\"\"\n    Similar to `view_page`, but for projects.\n\n    Args:\n        project_url: URL of an xprjson file\n        input_vals:\n        new_tab: open in new tab when true\n    \"\"\"\n    self._state.add_side_effect(\"dashboard.viewProject\", project_url, input_vals, new_tab)\n</code></pre>"},{"location":"chalkitapi/#notification-interactions","title":"Notification interactions","text":"<p>This class provides a port of the javascript API. An instance of it is provided to user scripts as <code>chalkit.notification</code>. It allows some interactions with the notifications. </p> Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>class NotificationActions:\n    \"\"\"\n    This class provides a port of the javascript API. An instance of it is provided to user scripts as\n    `chalkit.notification`. It allows some interactions with the notifications. \n    \"\"\"\n\n    def __init__(self, state: ChalkitState):\n        self._state = state\n\n\n    def notify(self, datanode_name: str, message: str, type: str) -&gt; None:\n        \"\"\"\n        Add a non-blocking notification.\n\n        Args:\n            datanode_name: the name of the dataNode\n            message: the content of the message\n            type: the type of the message (error, success, warning, info)\n        \"\"\"\n        self._state.add_side_effect(\"notification.notify\", datanode_name, message, type)\n\n    def swalert(self, title: str,message: str,type: str) -&gt; None:\n        \"\"\"\n        Use sweetAlert blocking notification.\n\n        Args:\n            title: the title of the notification\n            message: the content of the message\n            type: the type of the message (error, success, warning, info)\n        \"\"\"\n        self._state.add_side_effect(\"notification.swalert\", title, message, type)\n</code></pre> <p>options: show_source: false heading_level: 4 show_signature_annotations: true show_object_full_path: false show_root_toc_entry: false separate_signature: true show_signature_annotations: false</p>"},{"location":"chalkitapi/#chalkit_python_api.public_api.NotificationActions.notify","title":"<code>notify(self, datanode_name, message, type)</code>","text":"<p>Add a non-blocking notification.</p> <p>Parameters:</p> Name Type Description Default <code>datanode_name</code> <code>str</code> <p>the name of the dataNode</p> required <code>message</code> <code>str</code> <p>the content of the message</p> required <code>type</code> <code>str</code> <p>the type of the message (error, success, warning, info)</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def notify(self, datanode_name: str, message: str, type: str) -&gt; None:\n    \"\"\"\n    Add a non-blocking notification.\n\n    Args:\n        datanode_name: the name of the dataNode\n        message: the content of the message\n        type: the type of the message (error, success, warning, info)\n    \"\"\"\n    self._state.add_side_effect(\"notification.notify\", datanode_name, message, type)\n</code></pre>"},{"location":"chalkitapi/#chalkit_python_api.public_api.NotificationActions.swalert","title":"<code>swalert(self, title, message, type)</code>","text":"<p>Use sweetAlert blocking notification.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>the title of the notification</p> required <code>message</code> <code>str</code> <p>the content of the message</p> required <code>type</code> <code>str</code> <p>the type of the message (error, success, warning, info)</p> required Source code in <code>chalkit_python_api\\public_api.py</code> <pre><code>def swalert(self, title: str,message: str,type: str) -&gt; None:\n    \"\"\"\n    Use sweetAlert blocking notification.\n\n    Args:\n        title: the title of the notification\n        message: the content of the message\n        type: the type of the message (error, success, warning, info)\n    \"\"\"\n    self._state.add_side_effect(\"notification.swalert\", title, message, type)\n</code></pre>"},{"location":"recipes/","title":"Some useful recipes","text":""},{"location":"recipes/#javascript-recipes","title":"JavaScript recipes","text":""},{"location":"recipes/#simple-keyvalue-json-to-table-linewise","title":"Simple key/value JSON to table (linewise)","text":"<pre><code>return [_.keys(dataNodes[\"vehicle\"]), _.values(dataNodes[\"vehicle\"])];\n</code></pre> <ul> <li>See json-to-table-linewise-js.xprjson</li> </ul>"},{"location":"recipes/#simple-keyvalue-json-to-table-columnwise","title":"Simple key/value JSON to table (columnwise)","text":"<pre><code>return _.unzip([_.keys(dataNodes[\"vehicle\"]), _.values(dataNodes[\"vehicle\"])]);\n</code></pre> <ul> <li>See json-to-table-columnwise-js.xprjson</li> </ul>"},{"location":"recipes/#read-csv-display-content-and-write-it-to-file","title":"Read CSV, display content and write it to file","text":"<p>See csv-read-write-js.xprjson</p>"},{"location":"recipes/#plotly","title":"Plotly","text":""},{"location":"recipes/#x-axis-with-time","title":"x-axis with time","text":"<ul> <li>See plotly-with-date-time-js.xprjson</li> </ul>"},{"location":"recipes/#read-xlsx-file-from-url-and-convert-it-to-json","title":"Read xlsx file from URL and convert it to JSON","text":"<ul> <li>See xls-from-url-to-json-js.xprjson</li> </ul>"},{"location":"ds/ds-basics/","title":"Basics","text":""},{"location":"ds/ds-basics/#variable","title":"Variable","text":"<p>Variable is the cornerstone of Chalk'it. With the Variable dataNode type, a JSON, an array or a primitive variable can be manually defined or read from file.</p> <p>A variable is readable and writable : its value can be modified by a widget. This makes Chalk'it different from other tools that only perform data visualization.</p> <p></p> <p>The user can import a JSON variable from a file, export it to a file, or manually edit the parameters using the tree editor located in the lower portion of its edition panel.</p> <p>Simple example : simple-json.xprjson</p>"},{"location":"ds/ds-basics/#scripts","title":"Scripts","text":"<p>Script-type dataNode is used to write specific Python or JavaScript code that will be executed on the client side. It may use the output of the other dataNodes (referenced using keyword <code>dataNodes</code>). Currently, there types of Script dataNodes exist in Chalk'it :</p> <ul> <li>Python Script</li> <li>JavaScript Script (client-side)</li> </ul> <p>Below is a screenshot of a Python Script edition panel :</p> <p></p> <p>In this example, dataNode <code>multiply</code> references the dataNode <code>input</code>, specifically its property named <code>value</code>. This is specified using the keywords <code>dataNodes[\"input\"][\"value\"]</code>.</p> <p>A final <code>return</code> statement is required to return the result of the Script evaluation to Chalk'it workspace.</p> <p>The code is executed according to Chalk'it runtime rules.</p> <p>Two run mode are available for Python scripts - Using the Default runner that executes locally the Python code into a worker - Using the Pyodide runner that executes the Python code into a webworker runner in the browser</p>"},{"location":"ds/ds-basics/#sequencing","title":"Sequencing","text":"<ul> <li>Chalk'it keeps track of a global dependency graph (a Direct Acyclic Graph). This graph specifies both data and execution dependencies between dataNodes.</li> <li>When a dataNode output changes, all dependent (i.e. subsequent) dataNodes are automatically re-executed.</li> </ul> <p>A click on the Script dataNode graph icon displays the dependency graph for the formula dataNode.</p> <p></p> <p>A click on the graph icon display the complete project graph as shown in the picture below.</p> <p></p> <p>This dependency graph above describes the relationships of the dataNodes <code>input</code> and <code>multiply</code> above.</p> <p></p>"},{"location":"ds/ds-execution-engine/","title":"Execution engine","text":"<p>Chalk'it execution engine implements a synchronous/reactive scheduling algorithm.</p> <p>DataNode instances are the nodes of a direct acyclic graph where edges are data dependencies. They each own a status describing their latest execution state. Last update time indicates the time of the last successful execution.</p>"},{"location":"ds/ds-execution-engine/#datanodes-status","title":"DataNodes status","text":"<p>May have one of the following values :</p> <ul> <li>None : execution of the dataNode has not happened yet.</li> <li>Pending : execution of the dataNode is pending. This happens when a web-service call takes some time to complete.</li> <li>OK : last execution of the dataNode has completed sucessfully.</li> <li>Error : last execution has completed with error.</li> </ul>"},{"location":"ds/ds-execution-engine/#execution-rules","title":"Execution rules","text":"<ul> <li>DataNode is executed if and only if all its predecessors completed their execution with an OK status.</li> <li>Every time a dataNode is succesfully computed (status \"OK\"), it triggers the execution of all its successors.</li> <li>Graph execution is interrupted at dataNodes with an Error status. Their successors are not executed.</li> </ul>"},{"location":"ds/ds-execution-engine/#scheduling-instance","title":"Scheduling instance","text":"<ul> <li>At first start, graph is scheduled in a breadth-first order starting from source nodes. This is the first schedule instance.</li> <li>Some dataNodes might be updated through different ways : widget value written to dataNode, file imported into dataNode, formula modification, user refresh  of dataNode, periodic behavior, chalkit scheduler API... Such update launches the execution of the corresponding dataNode and a new scheduling instance.</li> </ul>"},{"location":"ds/ds-execution-engine/#execution-flow-control-parameters","title":"Execution flow control parameters","text":"<p>The graph execution is controlled by the execution flow control parameters specified in dataNodes.</p>"},{"location":"ds/ds-execution-engine/#auto-start","title":"Auto Start","text":"<p>When set to false, the associated dataNode is not executed on first execution of the dashboard nor in subsequent ones.</p> <p>Otherwise, i.e. when set to true, default dataNodes execution behavior applies: all nodes are executed by the Chalk'it runtime when all their predecessors successfully completed.</p> <p>For example, Auto Start can be set to false to avoid executing a heavy computation web-service at project load.</p> <p>Default value is true.</p>"},{"location":"ds/ds-execution-engine/#sample-time","title":"Sample Time","text":"<ul> <li>When different from 0, the dataNode is executed every sample time. It's useful for ensuring a periodic real-time execution behavior.</li> <li>Every time a non null sample time is defined, the execution engine computes the greatest common divisor and use it as a its base timer.</li> </ul> <p>Sample time is expressed in seconds and must be a multiple of 0.1s. Default value is 0.</p>"},{"location":"ds/ds-execution-engine/#explicit-trigger","title":"Explicit Trigger","text":"<ul> <li>When set to true, the dataNode, in terms of execution flow control, is considered as a source node. It is no longer executed when a direct predecessor is updated. With this setting, it is only executed when it is explicitly triggered by an associated push button widget, by chalkit scheduler APIs, or by a click on the dataNode refresh icon  present in the dataNodes list of tabs 1 or 3. Please refer to the Triggered POST example above.</li> <li>Otherwise (i.e. when set to false), default dataNodes execution behavior applies. Useful for implementing a form-like behavior (setting independently all required dataNode inputs, without executing it with each update, then explicitly triggering its execution).</li> </ul> <p>Default value is false.</p> <p>When a direct predecessor is updated, the dataNode, with an Explicit Trigger set to true and a previous succesfull computation (status \"OK\"), triggers the execution of all its successors.</p>"},{"location":"ds/ds-execution-engine/#execution-flow-control-parameters-summary","title":"Execution flow control parameters : summary","text":"<p>The table below summarizes the execution flow control parameters for the currently available dataNode types in Chalk'it. The checkbox in the table indicates that the property can be customized by the user (true or false). Otherwise, they have the default value indicated above.</p> Type Auto Start Sample Time Explicit Trigger Variable Python Script JavaScript Script (client-side) REST web-service Generic text file reader Generic binary file reader CSV file reader CSV file player Unzip file Clock Delay Memory MQTT WebSocket receive WebSocket send <p>Depending on the execution flow control parameters and the the data flow dependency, the dataNode execution is summarized in the following tables:</p> <p>For nonperiodic dataNodes (Sample Time == 0)</p> Cases Auto Start Explicit Trigger Run at project load Run after predecessor update Run after a user trigger* 1# <code>False</code> <code>False</code> No Yes Yes 2# <code>True</code> <code>False</code> Yes Yes Yes 3# <code>False</code> <code>True</code> No No Yes 4# <code>True</code> <code>True</code> Yes No (last value) Yes <p>*By an associated push button widget, by a click on the dataNode update icon , or by using executeDataNode API.</p> <p>For periodic dataNodes (Sample Time &gt; 0)</p> Cases Auto Start Explicit Trigger Run at project load Run after predecessor update Run after a user trigger* 5# <code>False</code> <code>False</code> No Yes Yes 6# <code>True</code> <code>False</code> Yes Yes Yes 7# <code>False</code> <code>True</code> No No Yes** 8# <code>True</code> <code>True</code> Yes No (last value) Yes** <p>**For cases 7# and 8#, when the user explicitly triggers the periodic dataNode, the Explicit Trigger option is turned to <code>False</code>.</p>"},{"location":"ds/ds-execution-engine/#datanodes-capabilities","title":"DataNodes capabilities","text":"<p>In addition to execution flow control parameters, dataNodes may have common capabilites depending on their type.</p>"},{"location":"ds/ds-execution-engine/#setinput-with-formula","title":"setInput with formula","text":"<p>Python or JavaScript code can be written to define input to dataNode computation.</p>"},{"location":"ds/ds-execution-engine/#setvalue-from-widget","title":"setValue from widget","text":"<p>Currently only Variable and Memory dataNodes have this property. It indicates that their workspace value can be modified by widgets that have write capabilities (such as sliders (horizontal slider ...), numeric input, editable table ...).</p>"},{"location":"ds/ds-execution-engine/#setvalue-from-file","title":"setValue from file","text":"<p>The value of the dataNode can be assigned from a file. See example in Push button.</p>"},{"location":"ds/ds-execution-engine/#setvalue-from-script","title":"setValue from script","text":"<p>Python or JavaScript code can be written to define input to Variable and Memory dataNodes, using chalkit API functions:</p> <ul> <li>setVariable</li> <li>setVariableProperty</li> <li>setVariables</li> </ul> <p>This is useful to init and reset variables. See example reset-counter.xprjson.</p> <p>The assessment of these functions is handled at the end of the current scheduling instance.</p>"},{"location":"ds/ds-execution-engine/#datanodes-capabilities-summary","title":"DataNodes capabilities : summary","text":"<p>The table below summarizes currently available dataNodes in Chalk'it, as well as their major properties in terms of execution flow and data flow.</p> Type setInput with formula setValue from widget setValue from file setValue from script Variable Python Script JavaScript Script (client-side) REST web-service Generic text file reader Generic binary file reader CSV file reader CSV file player Unzip file Clock Delay Memory MQTT WebSocket receive WebSocket send"},{"location":"ds/ds-reference/","title":"Reference","text":"<p>DataNodes of type Variable was described in the basics section.</p> <p>In the following, we describe the remaining dataNode types of Chalk'it.</p> Type Variable Python Script JavaScript Script (client-side) REST web-service Generic text file reader Generic binary file reader CSV file reader CSV file player Clock Delay Memory WebSocket receive WebSocket send"},{"location":"ds/ds-reference/#python-script","title":"Python Script","text":"<p>It allows the evaluation of a Python script in a local runner (default runner) or in client-side using Pyodide. Executed Python in client-side code may use the librairies available for installation in the Project librairies main tab. For further information, please read the Client-side execution with Pyodide</p> <p>Some examples:</p> <ul> <li>formula-py.xprjson</li> <li>rest-pandas-pyodide-covid.xprjson</li> <li>plotly-python-widget-py.xprjson</li> </ul>"},{"location":"ds/ds-reference/#javascript-script","title":"JavaScript Script","text":"<p>Similar to Python Script-type dataNodes, it is possible to write JavaScript code referencing other dataNodes, and producing JSON output to the workspace.</p> <p></p> <p>Simple example :</p> <ul> <li>formula-js.xprjson</li> </ul>"},{"location":"ds/ds-reference/#rest-web-services","title":"REST web-services","text":"<p>The dataNode type REST Web-service is used to call functions exposed as REST web-services. Input arguments may come from Chalk'it workspaces (referenced using keyword <code>dataNodes</code>). The response is then evaluated in the workspace, if the call was successful.</p> <p>Typically, the information required to write the dataNode comes from the web-service API documentation. It may use Swagger.</p>"},{"location":"ds/ds-reference/#parameters","title":"Parameters","text":""},{"location":"ds/ds-reference/#url","title":"URL","text":"<p>The URL of the HTTP request.</p> <p>The following examples illustrate Chalk'it syntax for path and how to use code to modify query arguments passed in URL.</p>"},{"location":"ds/ds-reference/#xproxy","title":"xProxy","text":"<p>xProxy concept was inspired by ThingProxy.</p> <p>It allows to overcome web-browser CORS (Cross-Origin Resources issues) restrictions. As Chalk'it runs on a web-browser, it is subject to browser's CORS policy.</p> <p>Please disable xProxy if you call a localhost or private network webservice.</p>"},{"location":"ds/ds-reference/#some-examples","title":"Some examples","text":""},{"location":"ds/ds-reference/#simple-get","title":"Simple GET","text":"<ul> <li>webservice-get.xprjson : this is a simple GET example with no input arguments.</li> </ul>"},{"location":"ds/ds-reference/#simple-post","title":"Simple POST","text":"<ul> <li>webservice-post-simple-js.xprjson: this is a simple POST example with body as a JSON.</li> </ul>"},{"location":"ds/ds-reference/#get-with-arguments","title":"GET with arguments","text":"<ul> <li>webservice-get-args-js.xprjson: this example illustrates a GET call where arguments (custom path and query arguments) are defined using the urlAppend object in the body field.</li> </ul>"},{"location":"ds/ds-reference/#get-with-arguments-from-another-datanode","title":"GET with arguments from another dataNode","text":"<ul> <li>webservice-get-input-py.xprjson and webservice-get-input-js.xprjson: in this example, two variables defined in a variable dataNode are used as inputs to the GET web-service call.</li> </ul>"},{"location":"ds/ds-reference/#get-of-a-binary-file","title":"GET of a binary file","text":"<ul> <li>xls-from-url-to-json-py.xprjson : an excel file is read from a remote URL and its content displayed.</li> </ul>"},{"location":"ds/ds-reference/#post-with-arguments-from-another-datanode","title":"POST with arguments from another dataNode","text":"<ul> <li>webservice-post-input-py.xprjson and webservice-post-input-js.xprjson: in this example, two variables defined in a variable dataNode are used as inputs to the POST web-service call.</li> </ul>"},{"location":"ds/ds-reference/#triggered-post","title":"Triggered POST","text":"<ul> <li>webservice-post-input-triggered-py.xprjson and webservice-post-input-triggered-js.xprjson: if the explicit trigger option is checked, the dataNode is only executed when an explicit click is performed (using a connected push button widget or the update button). When predecessors change, the dataNode execution is no longer triggered. This feature is useful for building form-like interfaces. See also Execution flow control parameters</li> </ul>"},{"location":"ds/ds-reference/#csv-file-reader","title":"CSV file reader","text":"<p>Reads a CSV file and translates its content to JSON, according to the value of ROW TO ARRAY property :</p> <ul> <li>If set to true, each row of the CSV file will be placed into a JavaScript Array.</li> </ul> <p>See example: csv-array.xprjson</p> <ul> <li>Otherwise, if set to false, content is parsed as an array of JSON objects.</li> </ul> <p>See example: csv-json.xprjson</p> <p>The following CSV:</p> <pre><code>\"lat\",\"lng\",\"CH4\"\n48.876684, 2.175765, 1.94\n48.876684, 2.175765, 1.95\n48.876684, 2.175765, 1.92\n48.876705, 2.175806, 1.93\n48.876705, 2.175806, 1.99\n</code></pre> <p>when ROW TO ARRAY is true, is translated to:</p> <pre><code>{\n    \"lat\": [\n        48.876684,\n        48.876684,\n        48.876684,\n        48.876705,\n        48.876705\n    ],\n    \"lng\": [\n        2.175765,\n        2.175765,\n        2.175765,\n        2.175806,\n        2.175806\n    ],\n    \"CH4\": [\n        1.94,\n        1.95,\n        1.92,\n        1.93,\n        1.99\n    ]\n}\n</code></pre> <p>otherwise, it is translated to:</p> <pre><code>[\n  {\n    lat: 48.876684,\n    lng: 2.175765,\n    CH4: 1.94,\n  },\n  {\n    lat: 48.876684,\n    lng: 2.175765,\n    CH4: 1.95,\n  },\n  {\n    lat: 48.876684,\n    lng: 2.175765,\n    CH4: 1.92,\n  },\n  {\n    lat: 48.876705,\n    lng: 2.175806,\n    CH4: 1.93,\n  },\n  {\n    lat: 48.876705,\n    lng: 2.175806,\n    CH4: 1.99,\n  },\n];\n</code></pre> <p>An example of table display of this CSV file is given here: csv-array-table-display.xprjson.</p> <p>It combines a CSV file reader as well as a JavaScript Script using the Lodash library.</p> <p></p>"},{"location":"ds/ds-reference/#csv-file-player","title":"CSV file player","text":"<p>Acts as a player of CSV file. Its behaviour depends on the TIME INCLUDED parameter:</p> <ul> <li> <p>If set to false, play starts from the first row. On each SAMPLING TIME, the current row is output in JSON format and the pointer moves to the next row. See example csv-player.xprjson.</p> </li> <li> <p>Otherwise (i.e. TIME INCLUDED), the first row is considered as a time vector.</p> </li> </ul>"},{"location":"ds/ds-reference/#delay","title":"Delay","text":"<p>Applies a one-step delay to its input defined in the INPUT SIGNAL field.</p> <p>On the first execution, its output is set to the JSON value defined in the INIT VALUE field.</p> <p>Example with Clock and Delay : clock-and-delay.xprjson.</p>"},{"location":"ds/ds-reference/#memory","title":"Memory","text":"<p>Gets the previous value of a dataNode defined in the selected value of the DATANODE ORIGIN combobox. Its name is automatically generated by adding the prefix _pastValue__.</p> <p>On the first execution, its output is set to the JSON value defined in the INIT VALUE field.</p> <p>This special dataNode exhibits a distinct behavior compared to other dataNodes, as it doesn't follow the typical data flow execution. Specifically, when its DATANODE ORIGIN is executed, the memory is initiated at the subsequent scheduler start (of the same disconnected graph).</p> <p>With Memory dataNode, user can create counters for example, without adding real cycles in the graph.</p> <p>See example: memory.xprjson.</p> <p>In this example, the cycle between \"counter\" and \"pastValue_counter\" is a non-algebraic cycle, because of the special memory type.</p> <p></p>"},{"location":"ds/ds-reference/#clock","title":"Clock","text":"<p>Gets the value of the JavaScript clock from the web-browser which is running the Chalk'it app:</p> <pre><code>{\n    \"numeric_value\": 1556898500713,\n    \"full_string_value\": \"03/05/2019 \u00e0 17:48:20\",\n    \"date_string_value\": \"03/05/2019\",\n    \"time_string_value\": \"17:48:20\",\n    \"date_object\": \"2019-05-03T15:48:20.713Z\"\n}\n</code></pre> <p>Example with Clock and Delay : clock-and-delay.xprjson.</p>"},{"location":"ds/ds-reference/#websocket","title":"WebSocket","text":"<p>These dataNodes offers support for the WebSocket protocol, which is supported by most web browsers to offert real-time data exchange capabilities. It provides full-duplex communication channels over a single TCP connection. WebSocket in Chalk'it is implemented as client. It needs to communicate with remote WebSocket server.</p>"},{"location":"ds/ds-reference/#websocket-receive","title":"WebSocket receive","text":"<p>Acts as a WebSocket client receiver for Chalk'it.</p> <p></p> <ul> <li>Remote IP address : The IP address or host name for your remote WebSocket sender.</li> <li>Remote IP port : The port to connect to your WebSocket sender.</li> <li>Initialization token : Keep to None for most applications.</li> <li>None : nothing is sent to the web server during initialization of exchange.</li> <li>xMOD : support to xMOD software. The token \"ws_init\" is sent once to the xMOD WebSocket server during initialisation of exchange.</li> <li>Decoding options : decoding options applied on response data sent by your WebSocket sender.</li> </ul> options Description JSON Received data are in JSON format Int8Array Received data are an Array of integer 1 byte Uint8Array Received data are an Array of unsigned integer 1 byte Int16Array Received data are an Array of integer 16 bits Uint16Array Received data are an Array of unsigned integer 16 bits Int32Array Received data are an Array of integer 32 bits Uint32Array Received data are an Array of unsigned integer 32 bits Float32Array Received data are an Array of float 32 bits (IEEE 754 single precision) Float64Array Received data are an Array of float 64 bits (IEEE 754 double precision) ArrayBuffer2String Received data are an Javascript ArrayBuffer and transform to string inside Chalk'it"},{"location":"ds/ds-reference/#websocket-send","title":"WebSocket send","text":"<p>Acts as a WebSocket client sender for Chalk'it.</p> <p></p> <ul> <li>JSON/JAVASCRIPT INPUT : The data sent by this dataNode to the WebSocket receiver. Data are sent without any modification. In the following example, the dataNode reads the value of \"Item\" property from the \"SelectedCmd\" dataNode and send this value to the remote WebSocket receiver as a 32-bit float.</li> </ul>"},{"location":"ds/ds-reference/#example","title":"Example","text":"<p>Follow instructions below to first build a WebSockets test server.</p> <ul> <li>Install Node.js from https://nodejs.org/</li> <li>Download Node.js server example simpleWS.js</li> <li>Install ws library used in simpleWS.js server</li> </ul> <pre><code>npm install ws\n</code></pre> <ul> <li>Run the WebSockets server</li> </ul> <pre><code>node simpleWS.js\n</code></pre> <ul> <li>The server should be ready and display the following message:</li> </ul> <p></p> <ul> <li> <p>Open the websocket-demo.xprjson example with Chalk'it.</p> </li> <li> <p>Switch to View mode.</p> </li> <li> <p>Test the communication with the server.</p> </li> <li> <p>The server should display:</p> <p></p> </li> <li> <p>Chalk'it should display:</p> <p></p> </li> </ul>"},{"location":"ds/ds/","title":"DataNodes","text":"<p>DataNodes are functions or variables that produce JSON into the workspace.</p> <p>Chalk'it maintains a workspace of these objects whose content corresponds to the latest dataNodes evaluation.</p> <p></p> <p>Chalk'it allows the user to specify a dataflow diagram of both data and execution dependency relationships between dataNodes. This constitutes the application logic.</p> <ul> <li>Basics</li> <li>Execution engine</li> <li>Reference</li> </ul>"},{"location":"export/export/","title":"Application export","text":"<p>An Chalk'it project may be:</p> <ul> <li>previewed in full-page view</li> <li>exported to a standalone html page on the local disk. Running this page from disk have many limitations, due to security restrictions of the browser. Pyodide workers are disabled. Some fonts are also blocked. Use this mode for JavaScript-only dashboards, for local tests.</li> <li>deployed as Docker images. See Docker deployment section for more information.</li> </ul>"},{"location":"export/export/#security-considerations","title":"Security considerations","text":"<p>When a HTML page is generated with Chalk'it, either exported, public or private, the xprjson content is inlined into the HTML page code, and might include sensitive information such as passwords, API keys, authorization information...</p> <p>Safely handling secrets is currenly outside Chalk'it scope.</p>"},{"location":"export/export/#docker-deployment","title":"Docker deployment","text":"<p>Rename your dashboard file to <code>dashboard.xprjson</code> and deploy it using Docker.</p> <p>Use this Dockerfile:</p> <pre><code>FROM python:3.11\n\n# assume your application is named application.xprjson\nCOPY application.xprjson application.xprjson\n\n# install py-chalk-it and gunicorn\nRUN pip install py-chalk-it gunicorn\n\n# this configuration is needed for your app to work, do not change it\nENTRYPOINT [\"gunicorn\", \"chlkt.render:app\", \"run\", \"--bind\", \"0.0.0.0:80\"]\n</code></pre> <p>Build the docker image:</p> <pre><code>docker build . -t application\n</code></pre> <p>Run it:</p> <pre><code>docker run -p 5000:80 application\n</code></pre> <p>Your dashboard will be displayed on port 5000.</p>"},{"location":"py/py-default/","title":"Default python runner","text":"<p>The default runner executes dataNodes Python code into a local worker. Needed Python librairies have to installed in the executing machine using pip.</p> <p>Examples:</p> <ul> <li>plotly-python-widget-py-local.xprjson</li> <li>rest-pandas-pyodide-covid-js-py-local.xprjson</li> </ul>"},{"location":"py/py-index/","title":"Python with Chalk'it","text":"<p>There are multiple solutions for using Python with Chalk'it. You may either use the local default runner, Pyodide or Python webapp frameworks such as Django or Flask.</p> <ul> <li>Default</li> <li>Chalk'it Pyodide</li> <li>Local prototyping with Flask</li> </ul>"},{"location":"py/py-proto-flask/","title":"Local prototyping with Flask","text":"<p>Flask pacakge allows to simply run a Python script as a webservice. This can be easily done as illustrated below.</p>"},{"location":"py/py-proto-flask/#setup-instructions","title":"Setup instructions","text":"<ul> <li>Download Python 3.7.2 (or another Python version &gt;= 3.6) from https://www.python.org/downloads/ and install it</li> <li>Install required packages to create a web-service from your Python code</li> </ul> <pre><code>pip install flask\npip install flask_restful\npip install flask_cors\n</code></pre> <ul> <li>Install commonly used packages for scientific computing :</li> </ul> <pre><code>pip install numpy\npip install scipy\n</code></pre> <p>If you are behind a proxy, you might need to specify it. Example :</p> <pre><code>pip --proxy our-proxy:8082  install numpy\n</code></pre>"},{"location":"py/py-proto-flask/#simple-template","title":"Simple template","text":"<p>Download this simple template and save it to template-python-ws.py file.</p> <pre><code>from flask import Flask, request\nfrom flask_restful import Resource, Api\nfrom flask_cors import CORS\nimport json\nimport numpy as np\n\napp = Flask(__name__)\nCORS(app)\napi = Api(app)\n\nclass Test(Resource):\n\n  def post(self):\n\n    input = json.loads(request.data)\n    A = input[\"A\"]\n    B = input[\"B\"]\n    sum = np.add(A,B)\n    product = np.multiply(A,B)\n\n    output = {\n      \"sum\": sum.tolist(),\n      \"product\" : product.tolist()\n    }\n\n    return output\n\napi.add_resource(Test, '/basicVect')\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>then run:</p> <pre><code>python template-python-ws.py\n</code></pre> <p>your server should be listening on localhost, port 5000.</p>"},{"location":"py/py-proto-flask/#chalkit-project","title":"Chalk'it project","text":"<p>Open the following simple Chalk'it project to test the python web-service.</p> <ul> <li>python-webservice.xprjson</li> </ul>"},{"location":"py/py-pyodide/","title":"Pyodide","text":""},{"location":"py/py-pyodide/#pyodide-in-few-works","title":"Pyodide in few works","text":"<p>Pyodide is a package that allows  to use the Python programming language within a web browser, by running it in web-assembly. It is designed to be used as a scientific computing platform, and includes many libraries and tools commonly used in scientific and numerical computing, such as NumPy and Matplotlib. Pyodide allows to use these libraries and tools directly from your JavaScript code, without the need to write any Python code yourself or set up a separate Python environment on your machine. Instead, you can just include Pyodide in your web page, and then use its API to access the Python libraries and run Python code within the context of your web page.</p> <p>Chalk'it has the ability to run your Python code with Pyodide and make it interoperate with JavaScript.</p>"},{"location":"py/py-pyodide/#supported-librairies","title":"Supported librairies","text":"<p>Chalk'it supports the two ways of importing Pyodide librairies :</p> <ul> <li>Pre-built packages (loaded with pyodide.loadPackage) : https://pyodide.org/en/stable/usage/packages-in-pyodide.html</li> <li>Micropip packages (tested with Chalk'it)</li> </ul>"},{"location":"py/py-pyodide/#drawbacks-of-using-pyodide","title":"Drawbacks of using Pyodide","text":"<p>There are a few potential drawbacks to using Pyodide:</p> <ul> <li> <p>Pyodide is not a full implementation of Python, and it may not support all Python libraries and features. Some Python libraries that rely on C extensions or require access to the operating system may not be compatible with Pyodide.</p> </li> <li> <p>Pyodide is designed to run within the browser, so it may not have the same level of performance as a native Python installation.</p> </li> <li> <p>Pyodide is still a relatively new project, and it may not be as mature or well-documented as other Python environments.</p> </li> <li> <p>Pyodide requires a recent version of a web browser that supports WebAssembly, so it may not work on older or less mainstream browsers.</p> </li> <li> <p>Because Pyodide runs within the browser, it may be subject to the same security and privacy concerns as other web-based technologies. You should be careful about running untrusted code within Pyodide, and consider the potential risks of exposing your data or code to the wider internet.</p> </li> </ul>"},{"location":"quick-start/quickstart/","title":"Quickstart : A journey throught the Iris dataset","text":""},{"location":"quick-start/quickstart/#introduction","title":"Introduction","text":"<p>The Iris flower dataset is a multivariate dataset introduced by the British statistician and biologist Ronald Fisher in his 1936 paper \"The use of multiple measurements in taxonomic problems\" as an example of linear discriminant analysis. It consists of 50 samples from each of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). Four features were measured from each sample: the length and the width of the sepals and petals, in centimeters. The Iris dataset is widely used in machine learning as a benchmark dataset for statistical classification algorithms. It is free and publicly avaible at the UCI Machine Repository.</p> <p>The following tutorial allows to illustrate main Chalk'it features througth this dataset. Expected result is provided in the following project:</p> <ul> <li>iris-tutorial.xprjson</li> </ul>"},{"location":"quick-start/quickstart/#1-create-a-projet","title":"1. Create a projet","text":"<p>Run Chalk'it in the command line:</p> <pre><code>chalk-it\n</code></pre> <p>Then, click My Project button to reach project editor on the Discover Chalk'it menu.</p> <p></p> <p>Name the new projet iris-tutorial by filling the title form, then save it using the Save button.</p> <p></p> <p>An iris-tutorial.xprjson is then created in your current directory (directory where the chalk-it command was run).</p>"},{"location":"quick-start/quickstart/#2-load-required-python-pyodide-librairies","title":"2. Load required Python Pyodide librairies","text":"<p>Using the Project librairies main tab, load the following required librairies: pandas, scikit-learn (from the Standard Librairies tabset) and plotly (from the Micropip Librairies tabset). Use the search bar to ease the process.</p> <p></p>"},{"location":"quick-start/quickstart/#3-load-dataset-data","title":"3. Load dataset data","text":"<p>Create a datanode named dataset to load the Iris dataset from Scikit-learn by following the next instructions:</p> <ul> <li> <p>Click on Datanodes main tab, then on New button:</p> <p></p> </li> <li> <p>Select Script (Pyodide) from the list of datanode types:</p> <p></p> </li> <li> <p>Enter dataset in the NAME field and copy the following code into the PYTHON SCRIPT field:</p> <pre><code>from sklearn import datasets\niris = datasets.load_iris()\nreturn chalkit.as_python(iris)\n</code></pre> <p>This step is illustrated below:</p> <p></p> </li> <li> <p>Finally, click on Save button for validation.</p> </li> </ul> <p>Datanode execution status and result are now available and can be previewed in the dataset window as follows:</p> <p></p>"},{"location":"quick-start/quickstart/#4-visualize-the-dataset","title":"4. Visualize the dataset","text":"<p>Visualize the dataset in 4 steps:</p>"},{"location":"quick-start/quickstart/#step1-prepare-the-data","title":"Step1: prepare the data","text":"<ul> <li> <p>To load the dataset in a Pandas dataframe, follow the procedure described in paragraph 2. to create a new Script (Pyodide) datanode. The main differences are:</p> <ul> <li>Enter datasetDataframe in NAME field,</li> <li>Copy the following code in PYTHON SCRIPT field.</li> </ul> <pre><code>import pandas as pd\n\niris = dataNodes[\"dataset\"]\n\ndf = pd.DataFrame(data=iris.data, columns=iris.feature_names)\ndf[\"target\"] = iris.target\ntarget_names = {0: \"Setosa\", 1: \"Versicolour\", 2: \"Virginica\" }\ndf['target'] = df['target'].map(target_names)\n\nreturn chalkit.as_python(df)\n</code></pre> <p>The expression dataNodes[\"dataset\"] indicates Chalk'it to read the last execution output of the dataset datanode. It also establishes a data and execution flow dependency between dataset and datasetDataframe.</p> </li> <li> <p>To visualize the dataset using Plotly Python librairy, create a new Script (Pyodide) datanode, name it plot, then copy the following code in PYTHON SCRIPT field.</p> <pre><code>import plotly.express as px\n\ndf = dataNodes[\"datasetDataframe\"]\nfig = px.scatter(df, x=\"sepal width (cm)\", y=\"sepal length (cm)\", color=\"target\", size='petal length (cm)', hover_data=['petal width (cm)'])\n\nreturn fig\n</code></pre> </li> </ul>"},{"location":"quick-start/quickstart/#step2-create-the-dashboard","title":"Step2: create the dashboard","text":"<ul> <li> <p>To browse the widgets libraries, click on Widgets main tab, then open the Plots category as shown below:</p> <p></p> </li> <li> <p>To add a Plotly generic widget to the dashboard editor, click on the corresponding icon or just perform a drag and drop.</p> <p></p> </li> </ul>"},{"location":"quick-start/quickstart/#step3-connect-datanode-to-widget","title":"Step3: connect dataNode to widget","text":"<ul> <li> <p>Click on the pencil icon on the top-right corner of the widget to display the widget menu. Select then Connect widget as shown below:</p> </li> <li> <p>A panel will then be displayed on the right-side of the screen. From the first connection dropdown, select the datanode plot, then its data field as it will provide the plot data needed for the widget. Repeat the process for the layout actuator immediately below, but this time using the layout field of the plot datanode. Finally, click Save to validate the choices.</p> <p></p> </li> </ul>"},{"location":"quick-start/quickstart/#step4-preview-the-dashboard","title":"Step4: Preview the dashboard","text":"<ul> <li> <p>A static preview of the figure is then provided. The widget can be moved or resized as needed. The *View* mode can be selected to start interactive visualization.</p> <p></p> </li> </ul>"},{"location":"quick-start/quickstart/#5-interactive-predictor-with-classifier-training","title":"5. Interactive predictor with classifier training","text":"<p>The goal is now to use the previously trained classifier to predict Iris species based on petal and sepal width and length.</p>"},{"location":"quick-start/quickstart/#classifier-training","title":"Classifier training","text":"<p>Following the steps already described in paragraph 2., create a Script (Pyodide) datanode named classifier and use the following python script as shown in the picture below.</p> <pre><code>from sklearn.ensemble import RandomForestClassifier\nclf=RandomForestClassifier()\nclf.fit(dataNodes[\"dataset\"].data,dataNodes[\"dataset\"].target)\nreturn clf\n</code></pre> <p></p> <p>The result should look like:</p> <p></p>"},{"location":"quick-start/quickstart/#interactive-predictor","title":"Interactive predictor","text":"<ul> <li> <p>Create a JSON Variable datanode named inputs using JavaScript workspace variable type. Use the following JSON definition:</p> <pre><code>{\"sepal_width\":5.4,\"sepal_length\":2.7,\"petal_length\":3,\"petal_width\":0.5}\n</code></pre> </li> </ul> <p>The result should be as follow: </p> <ul> <li> <p>Add four horizontal sliders to pilot the values of \"sepalwidth\",\"sepal_length\", \"petal_length\" and \"petal_width\". First click the _Widgets main tab, then basic inputs &amp; controls.</p> <p></p> </li> <li> <p>Connect each slider to its corresponding feature as shown below:</p> <p></p> </li> <li> <p>Configure sliders properties with a sliding step of 0.1 and min/max values as stated in the following table:</p> Feature min max sepal_width 4.3 7.9 sepal_length 2.0 4.4 petal_width 0.1 2.5 petal_length 1.0 6.9 </li> </ul> <p>For this purpose, select the Graphical properties tab of each widget as illustrated below:</p> <p></p> <ul> <li> <p>Add a Script (Pyodide) datanode named predict with the following code:</p> <pre><code>import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\ndf =pd.DataFrame(dataNodes[\"inputs\"],index=[0])\nclf = dataNodes[\"classifier\"]\n\nprediction=clf.predict(df)\n\nreturn dataNodes[\"dataset\"].target_names[prediction][0]\n</code></pre> </li> <li> <p>Go back to the Widgets main tab, open the Basic Displays tabset, and then add a KPI value widget</p> <p></p> </li> <li> <p>Connect this widget to the predict datanode.</p> </li> <li> <p>Switch to *View* mode. Use the sliders to change Iris features and view prediction result accordingly:</p> <p></p> </li> </ul> <p>Note that computation will be triggered every time a slider is changed.</p> <p>Explicit trigger</p> <p>Sometimes a different behaviour is needed, a form-like behaviour where the predictor execution is triggered only when a button is clicked.</p> <p>This behaviour can be achieved through the following steps :</p> <ul> <li> <p>Switch to *Edit* mode. Add a button widget, connect it to the predict datanode, and name it Run.</p> <p></p> </li> <li> <p>Open the datanode predict, switch the EXPLICIT TRIGGER parameter to YES.</p> <p></p> </li> <li> <p>Switch back to *View* mode to test the new behaviour.</p> </li> <li> <p>This project, when finished, can be previewed or exported to a standalone HTML page or your app can be deployed and shared using a public or a private link.</p> </li> </ul>"},{"location":"wdg/plot-themes/","title":"Plots themes","text":""},{"location":"wdg/plot-themes/#plotly","title":"Plotly","text":"<p>As of now, plotly line, bars and pie are themed along the other widgets. 3D widgets are also partially customized. But Generic and Real Time need customization from the user.</p> <p>To do so, they will need to create a new datanode \"layout\" object and then apply it to the \"Layout\" actuator. Here is an example of the structure of the layout object:</p> <pre><code>var layout = {\n  \"xaxis\": {\n    \"tickfont\": {\n      \"color\": \"var(--widget-color)\"\n    }\n  },\n  \"yaxis\": {\n    \"tickfont\": {\n      \"color\": \"var(--widget-color)\"\n    }\n  },\n  \"zaxis\": {\n    \"tickfont\": {\n      \"color\": \"var(--widget-color)\"\n    }\n  },\n  \"paper_bgcolor\": \"rgba(0,0,0,0)\",\n  \"plot_bgcolor\": \"rgba(0,0,0,0)\",\n  \"colorway\": [\n    \"var(--widget-color-2)\", \n    \"var(--widget-color-5)\", \n    \"var(--widget-color-6)\", \n    \"var(--widget-color-7)\"\n  ],\n  \"legend\": {\n    \"font\": {\n      \"color\": \"var(--widget-color)\",\n    }\n  }\n};\n\nreturn layout;\n</code></pre> <p>This example shows all colors in the Plotly config for wich we support CSS Custom Properties (ie. <code>var(---widget-color)</code>).</p> <p>To be perfectly clear about Themes colors, each Theme has 8 colors. Here is how they are used:</p> <pre><code>var(--widget-color-0); // Project background color, if not overriden with the color picker in the \"Dashboard Panel\" left sidebar panel\nvar(--widget-color-1); // Text color, same as var(--widget-color)\nvar(--widget-color-2); // Primary color\nvar(--widget-color-3); // Active color, derivated from the primary color\nvar(--widget-color-4); // Hove color, derivated from the primary color\nvar(--widget-color-5); // Accent color, used for charts\nvar(--widget-color-6); // Accent color, used for charts\nvar(--widget-color-7); // Accent color, used for charts\n</code></pre> <p>Theses colors can not be overriden globally.</p> <p>For Plotly charts types Line, Bars and Pie, they can be overriden in the widget \"Graphical Properties\" right side bar, for each chart individually.</p>"},{"location":"wdg/plot-themes/#echarts","title":"eCharts","text":"<p>eCharts widgets needs an \"option\" datanodes to be functionnal. Inside this datanode, the user can add datas and a lots of parameters like colors. By default, the <code>color</code> key inside the <code>option</code> object is not defined, we automatically apply colors to match the current project theme like so:</p> <pre><code>var option = {\n  \"color\": [\n    \"var(--widget-color-2)\", \n    \"var(--widget-color-5)\", \n    \"var(--widget-color-6)\", \n    \"var(--widget-color-7)\"\n  ]\n};\n\nreturn option;\n</code></pre>"},{"location":"wdg/wdg-annotation-video/","title":"Annotation &amp; Video","text":"<p>This group includes widgets for graphically annotating the dashboard.</p>"},{"location":"wdg/wdg-annotation-video/#label","title":"Label","text":"<p>Label widget allows the user to write multiline text, and apply common widget formatting options if necessary.</p>"},{"location":"wdg/wdg-annotation-video/#image","title":"Image","text":"<p>Image widget allows the user to annotate the dashboard by importing jpg or png images.</p> <p>When the enableActuator parameter is set to true, an actuator named base64Image appears in the \"Data Connection\" tab. It allows to display a base64 string encoded image. Animations may be achieved through dataNodes programming.</p> <p>See example below.</p> <p></p> <p>Example :</p> <ul> <li>base64-image-py.xprjson</li> <li>base64-image-js.xprjson</li> </ul> <p>By default, keepRatio parameter is true. When set to false, the image ratio is no longer preserved and the image will inherit its container size.</p> <p>The hideImageURL parameter controls the display of the image selection URL in the widget. When an Image widget is dropped on the dashbard, this parameter is set by default to true and allows the selection of an image. When an image has been selected, the parameter is automatically set to false to avoid any display issues. If another image has be selected, this parameter must be manually set to true to re-enable the image selection.</p>"},{"location":"wdg/wdg-annotation-video/#markdown","title":"Markdown","text":"<p>Markdown widget accept a markdown description in the form of string.</p> <p>Example:</p> <ul> <li>markdown-py.xprjson</li> <li>markdown-js.xprjson</li> </ul>"},{"location":"wdg/wdg-annotation-video/#html","title":"HTML","text":"<p>HTML widget accepts a HTML document description in the form of string.</p> <p>Example :</p> <ul> <li>generic-html-py.xprjson</li> <li>generic-html-js.xprjson</li> </ul>"},{"location":"wdg/wdg-annotation-video/#camera","title":"Camera","text":"<p>The main purpose of this widget  is to use the device's camera.</p> <p>The widget must be connected to a variable-type dataNode and will write information to its base64Image, mimeType and imageData actuators.</p> <p>Example :</p> <ul> <li>video-screenshot.xprjson </li> </ul>"},{"location":"wdg/wdg-basic-displays/","title":"Basic displays","text":"<p>Basic widgets typically perform display of numeric values. </p>"},{"location":"wdg/wdg-basic-displays/#value-display","title":"Value display","text":"<p>Value display is a generic display widget, which is intended to operate on primitive datatypes string and number.</p> <p>Among its parameters (in tab, \"Graphical Properties\") :</p> <ul> <li>decimalDigits : decimal precision of number. Default value is 3</li> </ul>"},{"location":"wdg/wdg-basic-displays/#kpi-display","title":"KPI display","text":"<p>Is card-like display.</p>"},{"location":"wdg/wdg-basic-displays/#real-time-kpi-display","title":"Real-time KPI display","text":"<p>Like KPI display, but also provides a memory graph of past values.</p> <p>Examples :</p> <ul> <li>advanced-kpi-py.xprjson</li> <li>advanced-kpi-js.xprjson</li> </ul>"},{"location":"wdg/wdg-basic-displays/#status-led","title":"Status led","text":"<p>For displaying binary status (on/off)</p>"},{"location":"wdg/wdg-basic-displays/#progress-bar","title":"Progress bar","text":"<p>Enables to display a progress over a range. See example :</p> <ul> <li>progress-bar.xprjson</li> </ul>"},{"location":"wdg/wdg-basic-displays/#full-circular-semi-circular-or-arch-circular-gauges","title":"Full-circular, semi-circular or arch-circular gauges","text":"<p>Are adapted for displaying score values, that have a well defined min/max range.</p> <p>The other widgets are adapted for real-time display:</p> <ul> <li>Status led : for displaying binary status (on/off)</li> </ul> <p>More advance displays (like Label, Markdown or HTML) can be found in the [Annotation &amp; Video] category.</p>"},{"location":"wdg/wdg-basic-inputs/","title":"Basic inputs and controls","text":"<p>Basic inputs and controls widgets allow the dashboard end-user to set numeric values (such as Horizontal slider or Numeric input widgets), binary values (such as Checkbox or Switch widgets) or text values (such as Text input widget). More complex ones operate on lists or arrays (like select or list). Some examples are illustrated below. </p> <p>All these widgets can only be connected to a dataNode-types with setValue from widget or setValue from file capabilities.</p>"},{"location":"wdg/wdg-basic-inputs/#numeric-input","title":"Numeric input","text":"<p>Numeric input is a numeric input widget, which is intended to operate on the primitive datatype number.</p> <p>Among its parameters (in tab, \"Graphical Properties\") :</p> <ul> <li>validationButton : adds a validation button to the right of the widget. When the validation button is clicked, the widget content is written to the connected dataNode.</li> <li>validationOnFocusOut : when focus is lost, widget content is written to the connected dataNode. The default value is true.</li> <li>isPassword : hides edited text as a password</li> <li>decimalDigits : decimal precision of number. Default value is 3</li> </ul>"},{"location":"wdg/wdg-basic-inputs/#text-input","title":"Text input","text":"<p>text input is a text input widget, which is intended to operate on the primitive datatype number.</p> <p>Among its parameters (in tab, \"Graphical Properties\") :</p> <ul> <li>validationButton : adds a validation button to the right of the widget. When the validation button is clicked, the widget content is written to the connected dataNode.</li> <li>validationOnFocusOut : when focus is lost, widget content is written to the connected dataNode. The default value is true.</li> <li>isPassword : hides edited text as a password</li> </ul>"},{"location":"wdg/wdg-basic-inputs/#horizontal-slider","title":"Horizontal slider","text":"<p>Horizontal slider allows to set the value of a dataNode field of primitive datatype \"number\", between its min and max parameters. The step parameter controls the slider increment value.</p>"},{"location":"wdg/wdg-basic-inputs/#vertical-slider","title":"Vertical slider","text":"<p>Similar to the Horizontal slider above with a different orientation.</p>"},{"location":"wdg/wdg-basic-inputs/#double-slider","title":"Double slider","text":"<p>This slider has two handles, allowing to set both a minValue and a maxValue ranging between the values of minRange and maxRange parameters. When rangeActuator parameter is set to true, new minRange and maxRange actuators appear in the \"Data connection\" tab, enabling to set these actuators from other dataNodes.</p>"},{"location":"wdg/wdg-basic-inputs/#checkbox","title":"Checkbox","text":"<p>Checkbox widget allows to set the value of a boolean dataNode field.</p>"},{"location":"wdg/wdg-basic-inputs/#switch","title":"Switch","text":"<p>Similar to Checkbox</p>"},{"location":"wdg/wdg-basic-inputs/#simple-switch","title":"Simple switch","text":"<p>Allows to set discrete values.</p>"},{"location":"wdg/wdg-basic-inputs/#push-button","title":"Push button","text":"<p>Push button widget has two different behaviors, depending on its fileInput parameter (located in \"Graphical Properties\" tab).</p> <ul> <li>If fileInput is false, the button works as a trigger for connected dataNode (i.e. when the user clicks the button, dataNode execution is forced)</li> <li>If fileInput is true, the button works as file reader. When the user selects a file, its content is copied to:</li> <li>Variable</li> <li>CSV file reader</li> <li>CSV file player</li> <li>Generic file reader</li> </ul> <p>Examples :</p> <ul> <li>First, create a sample file Input.json with the following content</li> </ul> <pre><code>{\n    \"length\": 25,\n    \"width\": 10\n}\n</code></pre> <p>Then run buttons.xprjson</p>"},{"location":"wdg/wdg-basic-inputs/#select","title":"Select","text":"<p>Select widget has three actuators:</p> <ul> <li>keys: an array describing the options that can be selected.</li> <li>values: an array describing the corresponding values that can be written. This actuator is optional.</li> <li>selectedValue: the dataNode where the selected output will be written, the selected key or its corresponding value, if an array of values has been specified.</li> </ul> <p>With the following array of keys</p> <pre><code>[\"choice1\", \"choice2\"]\n</code></pre> <p>and an (optional) array of values that the widget will output to the selectedValue actuator when the corresponding option is selected</p> <pre><code>[1, 2]\n</code></pre> <p>If values actuator is not specifed, the selectedValue will contain the value of the item selected in the keys array. Otherwise, the selectedValue will contain the item from the values array corresponding to the selected key.</p> <ul> <li>combo-box-py.xprjson</li> <li>combo-box-js.xprjson</li> </ul> <p></p>"},{"location":"wdg/wdg-basic-inputs/#list","title":"List","text":"<p>List widget expects a JavaScript array as its value input, such as :</p> <pre><code>[\"one\", \"two\", \"three\"]\n</code></pre> <p>selectedValue specifies the data source that will contain the selected item from the list.</p> <p></p> <p>Example :</p> <ul> <li>list-py.xprjson</li> <li>list-js.xprjson</li> </ul>"},{"location":"wdg/wdg-basic-inputs/#multi-select","title":"Multi-select","text":"<p>Example :</p> <ul> <li>multi-select-py.xprjson</li> <li>multi-select-js.xprjson</li> </ul>"},{"location":"wdg/wdg-basic-inputs/#table","title":"Table","text":"<p>Table widget expects its value input to reference a JavaScript array, containing subarrays, all of the same dimension, such as :</p> <pre><code>[\n    [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n    [5, 6, 9, 11, 15, 16, 20, 20, 16, 12, 7, 5]\n]\n</code></pre> <p>This array will be displayed as :</p> <p></p> <p>Example : table.xprjson</p> <p>Table may be editable if it is connected to a variable-type dataNode. Editable property can be set in a column-basis using the parameter editableCols. For example, if editableCols equals [0,1,2], columns 0, 1 and 2 are editable (i.e. cells in these columns, excluding headers, can be modified). The modifications will be assigned to the connected variable-type dataNode.</p> <p>Tables and editable tables may also be two dimentional.</p> <p></p> <p>Examples : </p> <ul> <li>table-editable.xprjson</li> <li>editable-table-2D.xprjson</li> </ul>"},{"location":"wdg/wdg-common-concept/","title":"Common concepts","text":"<p>Widgets are dropped in the Widgets main tabset to the dashboard edition zone.</p> <p></p> <p>A simple click on the top-right widget's pencil will open its parameterization sidebar. This form is divided into three tabs: Data connection and Graphical properties and Aspect.</p> <p></p>"},{"location":"wdg/wdg-geo-time/","title":"Geo &amp; Time","text":"<p>This category includes widgets related to location, date and time.</p>"},{"location":"wdg/wdg-geo-time/#leaflet-maps","title":"Leaflet maps","text":"<p>Leaflet maps widget has rich and versatile features for displaying various information on maps. It also has selection and interaction features. It is based on Leaflet library and its various plugins.</p> <p>When a new Leaflet maps widget is added to the dashboard, only one actuator named geoJSON1 is available in the \"Data connection\" tab. But this widget allows up to 5 types of display layers, according to the value of the associated parameter numberOfLayers. This parameter can be set in the \"Graphical properties\" tab as shown in the following picture:</p> <p></p> <p>Depending on the parametrization, new actuators may appear in \"Data connection\" tab and offer :</p> <ul> <li>0 to 8 possible layers of GeoJSON objects. Writing GeoJSON objects is described here.</li> <li>0 to 8 possible layers of heatMap objects</li> <li>0 to 8 possible layers of lineHeatMap objects</li> <li>0 to 8 possible layers of choropleth objects</li> <li>0 to 8 possible layer of imageOverlay objects</li> <li>0 to 8 possible layer of svgOverlay objects</li> </ul> <p>In addition to these pure display layers, selection controls can be activated by enabling the drawingFeatures option. Regions of the map can thus be selected using the mouse. When this option is enabled, the selectedGeoJson actuator receives user selection as geoJson, and needs to be connected to a variable-type dataNode. This features are based on the Geoman plugin.</p> <p>Enabling the drawingFeatures option enables the drawingFeaturesOptions parameters set which manages selection options (point, line, polygon, rectangle).</p> <p>Other parameters :</p> <ul> <li>offlineSupport : displays controls on the maps that allow to store tiles for the current displayed geographic area. Useful when using the map offline (i.e. with no Internet connection)</li> <li>tileServer : currently there is support for MapboxStreets and HereHybridDay</li> </ul>"},{"location":"wdg/wdg-geo-time/#geojson-layers","title":"geoJson layers","text":"<p>geoJson1 to geoJson8 inputs expect a geoJson object. Basic examples are shown below.</p>"},{"location":"wdg/wdg-geo-time/#point","title":"Point","text":"<p>Single point on a single layer of the map</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Point\",\n        \"coordinates\": [\n          2.295,\n          48.8738\n        ]\n      },\n      \"properties\": {\n        \"html\": \"See &lt;a href=\\\"https://en.wikipedia.org/wiki/Place_Charles_de_Gaulle\\\" target=\\\"_blank\\\"&gt;Place Charles de Gaulle&lt;/a&gt;\",\n        \"awesomeMarker\": {\n          \"icon\": \"fa-asterisk\",\n          \"prefix\": \"fa\",\n          \"markerColor\": \"red\"\n        }\n      }\n    }\n  ],\n  \"properties\": {\n    \"description\": \"Arc de triomphe\",\n    \"disableAutoscale\": false\n  }\n}\n</code></pre> <p>which will be displayed as :</p> <p></p> <p>Properties field of each feature allows to configure it. It comprises the following items :</p> <ul> <li>html : allows to write html call to be rendered inside the popup.</li> <li> <p>awesomeMarker : JSON configuration object for the Leaflet.awesome-markers library, allowing colorful iconic &amp; retina-proof markers for Leaflet, based on the Glyphicons / Font-Awesome icons. Only Font-Awesome icons are supported with xDash.</p> Property Description Default Value Possible values icon Name of the icon 'home' See glyphicons or font-awesome prefix Select the icon library 'glyphicon' 'fa' for font-awesome or 'glyphicon' for bootstrap 3 markerColor Color of the marker 'blue' 'red', 'darkred', 'orange', 'green', 'darkgreen', 'blue', 'purple', 'darkpurple', 'cadetblue' iconColor Color of the icon 'white' 'white', 'black' or css code (hex, rgba etc) spin Make the icon spin false true or false. Font-awesome required extraClasses Additional classes in the created  tag '' 'fa-rotate90 myclass' eller other custom configuration <p>Examples :</p> <ul> <li>Single point : osm-geojson-point.xprjson</li> <li>Multiple points : osm-geojson-points.xprjson</li> <li>Awesome markers : osm-geojson-point-awesome-marker.xprjson</li> <li>Disable autoscale with geoJSON point : osm-geojson-point-disable-autoscale.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#line","title":"Line","text":"<p>Single line on a single layer of the map</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"LineString\",\n        \"coordinates\": [\n          [\n            2.295,\n            48.8738\n          ],\n          [\n            2.321125,\n            48.865487\n          ]\n        ]\n      },\n      \"properties\": {\n        \"style\": {\n          \"color\": \"#FF0000\",\n          \"weight\": 4,\n          \"opacity\": 1\n        }\n      }\n    }\n  ],\n  \"properties\": {\n    \"description\": \"&lt;span style=\\\"color: #FF0000\\\"&gt;Champs-\u00c9lys\u00e9es&lt;/span&gt;\"\n  }\n}\n</code></pre> <p>which will be displayed as :</p> <p></p> <p>Examples :</p> <ul> <li>Single line : osm-geojson-line.xprjson</li> <li>Multiple lines : osm-geojson-lines.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#polygon","title":"Polygon","text":"<p>A polygon on a single layer of the map</p> <pre><code>{\n  \"type\": \"FeatureCollection\",\n  \"features\": [\n    {\n      \"type\": \"Feature\",\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              2.300815,\n              48.871943\n            ],\n            [\n              2.30158,\n              48.864638\n            ],\n            [\n              2.310094,\n              48.868996\n            ]\n          ]\n        ]\n      },\n      \"properties\": {\n        \"style\": {\n          \"color\": \"#01DF01\",\n          \"weight\": 4,\n          \"opacity\": 0.9,\n          \"fillColor\": \"#01DF01\",\n          \"fillOpacity\": 0.4\n        }\n      }\n    }\n  ],\n  \"properties\": {\n    \"description\": \"&lt;span style=\\\"color: #01DF01\\\"&gt;Triangle d'or&lt;/span&gt;\"\n  }\n}\n</code></pre> <p>which will be displayed as :</p> <p></p> <p>Example :</p> <ul> <li>osm-geojson-polygon.xprjson</li> </ul> <p>See also : Using GeoJSON with Leaflet</p>"},{"location":"wdg/wdg-geo-time/#heatmap-layers","title":"heatMap layers","text":"<p>heatMap1 to heatMap8 inputs expect a JSON object like the following one :</p> <pre><code>{\n  \"data\" : [\n    {\n    \"lat\": 44.78857833333333,\n    \"lng\": 0.20539333333333332,\n    \"H2O\": 58.0183\n    },\n    {\n    \"lat\": 44.78858,\n    \"lng\": 0.20539333333333332,\n    \"H2O\": 58.0187\n    }\n  ],\n  \"config\": {\n    \"opacity\": 0.5,\n    \"radius\": 1,\n    \"disableAutoscale\": false,\n    \"min\": 0,\n    \"max\": 100,\n    \"colorScale\": \"interpolateSpectral\",\n    \"reverseColorScale\": true\n  }\n}\n</code></pre> <p>When min and/or max config parameters are not specified, they are automatically computed from the data set. colorScale is a string from interpolate-type colorscales of D3.js : https://github.com/d3/d3-scale-chromatic.</p> <p>Example of display (for a larger data set) :</p> <p></p> <p>Example :</p> <ul> <li>osm-heatmap-view.xprjson</li> </ul> <p>Several parameters control the display of the heatmap, in particular :</p> <ul> <li> <p>sampledDisplay : allows to feed the map in real-time with instantaneous measures (single heatmap point). The config of the first point will be used. See corresponding examples:</p> </li> <li> <p>osm-heatmap-play-py.xprjson</p> </li> <li>osm-heatmap-play-js.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#lineheatmap-layers","title":"lineHeatMap layers","text":"<p>lineHeatMap1 to lineHeatMap8 inputs expect a JSON object like the following one :</p> <pre><code>{\n  \"data\": [\n    {\n      \"coordinates\": [\n        [\n          4.84112,\n          45.74968\n        ],\n        [\n          4.84091,\n          45.74981\n        ]\n      ],\n      \"CO2\": 6\n    },\n    {\n      \"coordinates\": [\n        [\n          4.84138,\n          45.74953\n        ],\n        [\n          4.84112,\n          45.74968\n        ]\n      ],\n      \"CO2\": 10\n    }\n  ],\n  \"config\": {\n    \"opacity\": 0.9,\n    \"weight\": 4,\n    \"disableAutoscale\": false,\n    \"min\": 0,\n    \"max\": 10,\n    \"colorScale\": \"interpolateSpectral\",\n    \"reverseColorScale\": true\n  }\n}\n</code></pre> <p>When min and/or max config parameters are not specified, they are automatically computed from the data set. colorScale is a string from interpolate-type colorscales of D3.js : https://github.com/d3/d3-scale-chromatic.</p> <p>Example of display (for a larger data set) :</p> <p></p> <p>Example :</p> <ul> <li>osm-lineheatmap.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#choropleth-layers","title":"Choropleth layers","text":"<p>choropleth1 to choropleth8 inputs expect a JSON object like the following one :</p> <pre><code>{\n  \"data\": [\n    {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              2.329144745999656,\n              48.87299590267482\n            ],\n            [\n              2.329453736347205,\n              48.8723745764414\n            ],\n            [\n              2.331221849053691,\n              48.8721034501072\n            ]\n          ]\n        ]\n      },\n      \"CO2\": 6\n    },\n    {\n      \"geometry\": {\n        \"type\": \"Polygon\",\n        \"coordinates\": [\n          [\n            [\n              2.331445008712763,\n              48.87264570173727\n            ],\n            [\n              2.332766800791433,\n              48.870849470245\n            ],\n            [\n              2.3349983986918237,\n              48.87142562719721\n            ]\n          ]\n        ]\n      },\n      \"CO2\": 10\n    }\n  ],\n  \"config\": {\n    \"opacity\": 0.9,\n    \"weight\": 4,\n    \"disableAutoscale\": false,\n    \"min\": 0,\n    \"max\": 10,\n    \"colorScale\": \"interpolateOranges\",\n    \"reverseColorScale\": false\n  }\n}\n</code></pre> <p>When min and/or max config parameters are not specified, they are automatically computed from the data set. colorScale is a string from interpolate-type colorscales of D3.js : https://github.com/d3/d3-scale-chromatic.</p> <p>Example of display (for a larger data set) :</p> <p></p> <p>Example :</p> <ul> <li>osm-choropleth-py.xprjson</li> <li>osm-choropleth-js.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#imageoverlay-layers","title":"imageOverlay layers","text":"<p>imageOverlay1 to imageOverlay8 inputs expect a geoJson object like the following one :</p> <pre><code>{\n    \"imageUrl\" = \"http://www.fondation-tuck.fr/upload/docs/image/jpeg/2015-01/logo-ifpen.jpg\";\n    \"imageBounds\" = [\n        [48.874875, 2.171738],\n        [48.877923, 2.179484]\n    ];\n    \"title\" = \"IFPEN location\";\n    \"addAs\" = \"overlay\"; // overlay or baseLayer\n}\n</code></pre> <p>As shown in the code snippet above, the addAs parameter may take two values: overlay which adds a checkbox control, or baseLayer which adds a radio button control.</p> <p>Example :</p> <ul> <li>osm-image-overlay.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#svgoverlay-layers","title":"svgOverlay layers","text":"<p>svgOverlay1 to svgOverlay8 inputs expect a JSON object like the following one :</p> <pre><code>{\n  \"data\":\n  [\n    {\n      \"lat\": 48.876684999999995,\n      \"lng\": 2.175765,\n      \"rotation\": 255\n    },\n    {\n      \"lat\": 48.876684999999995,\n      \"lng\": 2.175765,\n      \"rotation\": 256\n    }\n  ],\n  \"config\": {\n    \"marker\": \"arrow\",\n    \"title\": \"Wind direction\",\n    \"opacity\": 0.5,\n    \"length\": 9.3,\n    \"disableAutoscale\": false,\n    \"addAs\": \"overlay\" // overlay or baseLayer\n  }\n}\n</code></pre> <p>Example of display (for a larger data set) :</p> <p></p> <p>Example :</p> <ul> <li>osm-svg-layer-view-js.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#drawing-features","title":"Drawing features","text":"<p>It is possible to allow the user to manually select points, lines, rectangles or polygon regions in the map. This is possible by enable the drawingFeatures option.</p> <p></p> <p>Selection result will be written to the selectedGeoJson actuator.</p> <p>Example :</p> <ul> <li>osm-drawing-features.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#folium-maps","title":"Folium Maps","text":"<p>Folium is a Python library used for visualizing geospatial data. It leverages the power of the Leaflet.js library and provides a simple way to create interactive maps. Folium can be used to create various types of maps such as choropleth maps, bubble maps, and scatter maps, and provides an easy-to-use interface for adding markers, popups, and other interactive features to the maps.</p> <p>Folium is built on top of the Python data analysis library pandas, which makes it easy to manipulate and visualize large datasets. It also supports several tilesets such as OpenStreetMap, Mapbox, and Stamen, which can be used to customize the look and feel of the maps.</p> <p>Usage examples:</p> <ul> <li>folium-point.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#address-autocompletion","title":"Address autocompletion","text":"<p>This widget uses the here geocoder autocomplete API to provide suggestion as the user types an address location.</p> <p>The parameter countryIsoCodes restricts the provided suggestions to the specifed country.</p>"},{"location":"wdg/wdg-geo-time/#simple-calendar","title":"Simple calendar","text":"<p>Use the Simple calendar widget to select a date.</p> <p></p> <p>Example :</p> <ul> <li>date-picker.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#date-range-calendar","title":"Date-range calendar","text":"<p>Enables the selection of a date interval.</p>"},{"location":"wdg/wdg-geo-time/#d3-year-heatmap-caldendar","title":"D3 year heatmap caldendar","text":"<p>Allows to associate range heatmap to a yearly-based calendar. Very useful to visually identify sporadic information. Date selection is also possible.</p> <p></p> <p>Example :</p> <ul> <li>d3-year-heatmap-calendar.xprjson</li> </ul>"},{"location":"wdg/wdg-geo-time/#simple-clock","title":"Simple clock","text":"<p>Use the Simple clock widget to select a time.</p> <p></p> <p>Example :</p> <ul> <li>time-picker.xprjson</li> </ul>"},{"location":"wdg/wdg-plots/","title":"Plots","text":"<p>Plots in Chalk'it may be made either with Python or JavaScript code:</p> <ul> <li>Python-based plots are available using Plolty Python or Matplotlib, currenly only with the Python Script-type dataNode</li> <li>JavaScript-based plots are available using  Plotly.js or Apache ECharts</li> <li>Simplified usage (array actuators) is available for Plotly line, Plotly bar and Plotly pie. Otherwise, use the Plotly generic for a complete Plotly.js options and configurations.</li> </ul> <p>Plotly.js-based widgets share common parameters, especially hideModeBar which allows to hide plot options toolbar at dashboard play.</p>"},{"location":"wdg/wdg-plots/#plotly-line","title":"Plotly line","text":"<p>Allows to quickly display line charts, when x and y axis are expressed as arrays of numbers. The parameter numberOfAxis allows to specifiy up to 8 y-axis actuators (named y1 to y8), sharing the same x-axis actuator (named x). Widget layout may be configured in the \"Graphical properties\" tab.</p> <ul> <li>line-chart.xprjson</li> </ul> <p></p>"},{"location":"wdg/wdg-plots/#plotly-bar","title":"Plotly bar","text":"<p>Here parameter numberOfAxis allows to specify couples of x and y axis actuators (named x1, y1 to x8, y8).</p> <p>Some examples :</p> <ul> <li>bar-chart.xprjson</li> </ul> <p></p> <ul> <li>stack-bar-chart-js.xprjson</li> </ul> <p></p>"},{"location":"wdg/wdg-plots/#plotly-pie","title":"Plotly pie","text":"<p>This widget has two actuators :</p> <ul> <li>values: an array of values to be displayed as pie chart</li> <li>labels: an optional array of labels associated to values</li> </ul> <p></p> <p>Example :</p> <ul> <li>pie-chart.xprjson</li> </ul>"},{"location":"wdg/wdg-plots/#plotly-real-time","title":"Plotly Real-time","text":"<p>The widget provides a real-time graph for displaying numeric-based dataNode inputs, having a given sample-time.</p> <p>Example : real-time-kpi-plotly-js.xprjson</p>"},{"location":"wdg/wdg-plots/#plotly-javascript-generic","title":"Plotly JavaScript generic","text":"<p>This widget accepts three actuators : data, layout and selection. In opposite to previous Plotly-based widgets, layout cannot be set from \"Graphical properties\" tab. This brings more expressive power for layout specification using programming dataNodes.</p> <p>Defining data and layout is illustrated in plotly.js documentation.</p> <p>Some examples:</p> <ul> <li>bubble-chart-js.xprjson</li> </ul> <p></p> <ul> <li>plotly-stat-box-js.xprjson</li> </ul> <p></p> <p>The selection actuator is detailed in this topic</p>"},{"location":"wdg/wdg-plots/#plotly-python-generic","title":"Plotly Python Generic","text":"<p>This widget expects a Plotly figure Python object, produced by a Python Script-type dataNode. Below a code example: </p> <pre><code>import plotly.express as px\n\ndf = px.data.gapminder().query(\"country=='Canada'\")\nfig = px.line(df, x=\"year\", y=\"lifeExp\", title='Life expectancy in Canada')\n\nreturn fig\n</code></pre> <p>All receipes may be found in Ploty Python documentation.</p> <p>No call to <code>fig.show()</code> is needed because rendering process will be entirely handled by Chalk'it according to its rendering rules.</p> <p>Example:</p> <ul> <li>plotly-density-heatmap-py.xprjson</li> </ul>"},{"location":"wdg/wdg-plots/#matplotlib","title":"Matplotlib","text":"<p>In the same way as Plotly Python widget, Matplotlib widget expect a figure object as actuator. Below a code example:</p> <pre><code>import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots()\n\nfruits = ['apple', 'blueberry', 'cherry', 'orange']\ncounts = [40, 100, 30, 55]\nbar_labels = ['red', 'blue', '_red', 'orange']\nbar_colors = ['tab:red', 'tab:blue', 'tab:red', 'tab:orange']\n\nax.bar(fruits, counts, label=bar_labels, color=bar_colors)\n\nax.set_ylabel('fruit supply')\nax.set_title('Fruit supply by kind and color')\nax.legend(title='Fruit color')\n\nreturn fig\n</code></pre> <p>All receipes may be found in Matplotlib documentation.</p> <ul> <li>No call to <code>plt.show()</code> is needed because rendering process will be entirely handled by Chalk'it according to its rendering rules.</li> </ul> <p>Example:</p> <ul> <li>matplotlib-bar-color-py.xprjson</li> </ul>"},{"location":"wdg/wdg-plots/#echarts","title":"ECharts","text":"<p>Simply, copy and paste the needed visualization from ECharts examples gallery to a  JavaScript Script dataNode. This example shall return an option JSON according to ECharts grammar. Finally, connect this dataNode to the option widget actuator.</p> <p>Some examples:</p> <ul> <li>echarts-covid-comparison-js.xprjson</li> </ul>"},{"location":"wdg/wdg/","title":"Widgets","text":"<p>Chalk'it offers WYSIWYG (what you see is what you get) edition capabilities. Dashboards are built using drag and drop of widgets, which are connected to dataNodes.</p> <ul> <li>Common concepts</li> <li>Basic</li> <li>Plots</li> <li>Geo &amp; Time</li> <li>Annotation &amp; Video</li> </ul>"},{"location":"wdg/selection/plot-selection/","title":"Select and Filter data","text":"<p>Selection and Filter are important tools in interactive data analysis and visualisation.</p> <p>With Plotly JavaScript generic graph, the Chalk'it platform gives you access to selected events which contain all fields necessary in order to use selected element in the dataflow (transfer selection to another graph, filter data according to selection, ...)</p> <p>For those familiar with Plotly select events, \"appendix I\" will explain how xDash selection events are created.</p>"},{"location":"wdg/selection/plot-selection/#main-data-and-global-index","title":"main data and global index","text":"<p>When user wants to create a graph from a selection of another graph, or to transfer the selection from one graph to another (or from one graph to a script), there is a logic of a main shared data.</p> <p>This could be the result of a CSV import, a global JSON or GeoJSON.</p> <p>This shared data is considered and referenced as the global data in our exemples and will be present in the dataNode [data].</p> <p>Each global shared data is indexed (In the CSV exemple, the index is the lane of each datum) and we will use the term \"global index\" as a generic expression to reference this main indexation.</p>"},{"location":"wdg/selection/plot-selection/#how-to-use-the-selection-from-a-graph-to-draw-another-one","title":"How to use the selection from a graph to draw another one","text":"<p>First example :</p> <ul> <li>selection-example-1.xprjson</li> </ul> <p>In this first exemple we :</p> <ul> <li>Plot all data in one scatter plot graph (Plotly Generic)</li> <li>Recover the selection from the scatter</li> <li>Build an histogram using only the selected data</li> </ul> <p>The main data is an array of datum that each contains 3 values [Alpha, Beta, Delta]. Typically obtained from a CSV import. The cross plot will be done between [alpha vs beta] and [delta] will be used to draw the histogram.</p> <p></p> <p>The dataFlow contains 5 dataNodes and 2 associated widgets</p> <ul> <li>One DataNode that contains the global data.</li> <li>Two DataNodes are created for each Plotly Graph (data and layout)</li> <li>One DataNode which contains the selection</li> <li>One widget [plotly generic] is the scatter plot</li> <li>One widget [plotly generic] is the histogram</li> </ul> <p>The data for the Plotly histogram is dependant of the selection DataNode.</p> <p>The graphs and DataNodes associated (PloltlyData and PlotlyLayout) dont know each others and dont have direct relationship.</p> <p>In order to have a clean change in the histogram, the X axis limit and bin limits are defined via all the data.</p>"},{"location":"wdg/selection/plot-selection/#how-to-draw-a-graph-with-different-sources-of-selection","title":"How to draw a graph with different sources of selection","text":"<p>Now, lets imagine that what you want to draw is defined by the addition of different incoming selections.</p> <p>Example 2:</p> <ul> <li>selection-example-2.xprjson</li> </ul> <p>In Exemple 2</p> <ul> <li>We draw 2 scatter plots</li> <li>Both selection are used to draw the histogram.</li> </ul> <p>This exemple is similar than the last one except that :</p> <ul> <li>the selection datanode has now one field for each cross plot selection</li> <li>one dataNode is now present to process the selection [MultiSelectionProcess]</li> </ul> <p>The process node does the addition of each selection.</p> <p>The structure of the selection node has changed, there is now one field for each graph which will aggregate their selection.</p> <p>Each selection actuator from the cross plot now is now linked with one field of the selection node.</p> <p>It is relevant that the code of the process DataNode dont know the number and the origin of each incoming selections. You can so add and remove origin of selection without changing the code of the process datanode</p> <p>The PlotlyData datanode used for the histogram takes information from the process node.</p> <p>A datanode is used to collect information and create the \"global\" selection. This is not done in the datanode used for plotly data. This global selection could be used for other graphs or script without copy/paste.</p>"},{"location":"wdg/selection/plot-selection/#how-to-synchronize-selection-to-have-a-single-global-selection","title":"How to synchronize selection to have a single global selection","text":"<p>The different selection on each graph are independant.</p> <p>In some case we want a \"global\" selection\" which regroup all selection and that all graph show the selected data.</p> <p>Example 3</p> <ul> <li>selection-example-3.xprjson</li> </ul> <p>In this exemple we do 2 scatter plots from the same global data. As exemple 2, we use a process node to concatenate the information but on both graphs we want to see all the selected data.</p> <p>Plotly graphs are mainly correlated with their own selection.</p> <p>Trying to use the \"selectedpoints\" field present in plotly data is a bad idea. This fied is ok if the graph dont has his own selection behavior. But this field is erased when using \"rectangle\" or \"lasso\" selection. It is better to consider external selection as a complement of the possible present selection. \"appendix II\" will enter deeper in exposing the selection</p> <p>The additional selected items are not drawn last, so we see clearly a difference between the selection from the graph and the selection from other sources. In next exemple we propose a solution to handle this.</p>"},{"location":"wdg/selection/plot-selection/#how-to-use-the-selection-event-if-the-index-selected-are-different-from-the-data-index","title":"How to use the selection event if the index selected are different from the data index","text":"<p>Example 4:</p> <ul> <li>selection-example-4.xprjson</li> </ul> <p>For the moment, in the different exemples we have assumed that the [index] given by the selection is the same that the index of the data.</p> <p>It means that if the data selected is \"4\" it is the same index on the global data index.</p> <p>But it is not always the case, for multiple reasons, the index given by the selection could be different, for exemple</p> <ul> <li>you need to draw only a part of the data</li> <li>you need to sort the data X vs Y in order to draw a line</li> <li>you need to sort the global data before drawing in order to control   the Z order of the draw</li> <li>...</li> </ul> <p>Each plotly trace contains a [customdata] field that can help us to resolve this problem</p> <p>In exemple [nom de l'exemple] we used the same But in the data for plotly DataNode we order the drawn order with all selected data at the end.</p> <p>it is not possible to give a drawn order to plotly (V2.16.3). The element and the trace are drawn in the order given by the user. Last element of last trace are drawn last.</p> <p>In the data for plotly Datanode we sort the element but we keep the change in an array called \"orderForGraph\" which will be transfer to plotly in the \"customdata\" field. This field is present in the selection of the dataflow and can be used in the selectionProcess node to obtain the equivalent index.</p>"},{"location":"wdg/selection/plot-selection/#create-a-reset-selection-action","title":"Create a reset selection action","text":"<p>Example 5:</p> <ul> <li>selection-example-5.xprjson</li> </ul> <p>in our exemple, selection is in an independant DataNode, and no more only a graphical features.</p> <p>In order to reset the selection, we need to clean all the DataFlow and all the graphics. In exemple 5 we create a reset selection script which is triggered by a push button.</p> <p>3 significant addition in the dataNode have to be done in order to have a clean result.</p> <ul> <li> <p>Reset the DataNode [Selection] via the chalkit function chalkit.setVariable. This will reset the selection and the plotly data (done in [ResetSelection] dataNode)</p> </li> <li> <p>Add the field \"selections : []\" in all layout impacted in order to remove all the visible rectangle or lasso drawn</p> </li> <li>Create a relation between the resetSelection action script and the different layout to trigger the layout dataNodes.</li> </ul>"},{"location":"wdg/selection/plot-selection/#good-practices","title":"Good Practices","text":""},{"location":"wdg/selection/plot-selection/#create-one-datanode-for-the-layout-and-one-for-the-data","title":"Create one datanode for the layout and one for the data","text":"<p>If one dataNode is used to give the Data and the Layout for the widget, some unexpected graphical behavior can happen.</p> <p>Usually data often change according to action, but user like to keep element of visualisation (zoom, factor, element selected, ... )</p> <p>When data changed, plotly will also reset the layout if they are in the same datanode, which can change your view according to what is defined in the original layout.</p>"},{"location":"wdg/selection/plot-selection/#never-use-the-same-layout-datanode-for-multiple-graphs","title":"Never use the same layout DataNode for multiple graphs.","text":"<p>Plotly keeps in memory each layout for its own internal use. It never makes copy.</p> <p>If the same layout is used for exemple for 2 scatter plots each pan/zoom/selection done on one plot ... will be passed to the other graph but not at the same time.</p> <p>The repercution will be done next time plotly via the dataFlow needs to check the current layout.</p> <p>And you dont know when it will happens (often when the widget is selected)</p>"},{"location":"wdg/selection/plot-selection/#appendix-1-plotly-selection-and-chalkit-selection","title":"Appendix 1 : Plotly Selection and Chalk'it Selection","text":"<p>Structures of the plotly selection are discribe in</p> <p>https://plotly.com/javascript/plotlyjs-events/#event-data</p> <p>So plotly selection events are dependant from the kind of the original graph (2D, 3D, map, ...)</p> <p>Plotly selection cannot directly be transformed in JSON because it is a circular structure.</p> <p>Chalk'it selection event is one unified selection containing an array for each trace which contains the index of the element and the metadata if those one were present in the original trace.</p> <p>[curveNumber (trace number)]</p> <ul> <li>indexSelected : []</li> <li>customdata : [] (if customdata field is present in original DataTrace)</li> </ul> <p>For exemple if you have 2 traces in your Plotly graph, Chalk'it selection would return :</p> <pre><code>[ 0 : {Data : [1, 10, 120, 123], customData: [1, 10, 120, 123]}]\n[ 1 : {Data : [1, 10, 120, 123], customData: [1, 10, 120, 123]}]\n</code></pre>"},{"location":"wdg/selection/plot-selection/#appendix-2-how-to-handle-all-selection-behaviors-from-plotly-without-creating-trouble","title":"Appendix 2 : how to handle all selection behaviors from plotly without creating trouble","text":"<p>In some situation you want to have a total control of filter/selection and the way plotly control the selection can create confusion.</p> <p>The behavior you need can visualy enter in \"conflict\" with plotly internal behavior, or can provoke non wanted behaviors.</p> <p>When you draw a selection via plotly, each attributes dont used the standard fields (color, size, ...) but used the fields that are under the 2 fields \"selected\" and \"unselected\" .. and this is true only for plotly graph which accept this fields;</p> <p>\"selected\" and \"unselected\" are used by plotly when</p> <ul> <li>a \"rectangle\" selection is done</li> <li>a \"lasso\" selection is done</li> <li>if the field \"selectionpoints\" is given as a plotly data</li> </ul> <p>In those cases, data are divided in two groups (selected and unselected) and are drawn according to these fields. If you dont define them, plotly used internal behavior to create them (mainly reducing the tone and the opacity)</p> <ul> <li>the \"regular\" way (for exemple <code>[data][marker]</code> in scatter plot) to   render graph are no more used when graph is in selection   mode.</li> <li>A \"rectangle\" or \"lasso\" selection reset the field \"selectionpoints\"</li> </ul> <p>In exemple 3 and 4 we want to keep the plotly behavior for drawing and moving selection, but we also want to keep the way we draw things. So we copy the style on the \"selected\" and \"unselected\" fields because we want a global selection and not a selection which takes into account only the graph;</p>"}]}