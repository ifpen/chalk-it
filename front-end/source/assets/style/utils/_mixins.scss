/*
* Mixins
* @description: Add scss tools to help keeping consistency
* 
*/

@use 'sass:math';

// Responsive mixins - We only use media up as it is better to start from mobile-first
@function breakpoint-min($name, $breakpoints: $breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

@mixin media-breakpoint-up($name, $breakpoints: $breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Border radius mixin
@function br($name, $br: $border-radiuses) {
  $size: map-get($br, $name);
  @return $size;
}

// Fonts size mixin
@function fs($name, $fs: $font-sizes) {
  $size: map-get($fs, $name);
  @return if($size != 0, $size, $font-size);
}

// Fonts weight mixin
@function fw($name, $fw: $font-weights) {
  $size: map-get($fw, $name);
  @return if($size != 0, $size, $font-weight);
}

// Spacers mixin
@function spacer($name, $spacers: $spacers) {
  $size: map-get($spacers, $name);
  @return $size;
}

// Grid mixins - From Bootstrap 4
@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: math.div(-$gutter, 2);
  margin-left: math.div(-$gutter, 2);
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: math.div($gutter, 2);
  padding-left: math.div($gutter, 2);
}

@mixin make-col($size, $columns: $grid-columns) {
  $width: math.div($size, $columns);
  flex: 0 0 percentage($width);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($width);
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%; // Reset earlier grid tiers
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: math.div($size, $columns);
  margin-left: if($num == 0, 0, percentage($num));
}

@mixin row-cols($count) {
  > * {
    flex: 0 0 math.div(100%, $count);
    max-width: math.div(100%, $count);
  }
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    width: 100%;
    padding-right: math.div($gutter, 2);
    padding-left: math.div($gutter, 2);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @if $columns > 0 {
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @extend %grid-column;
        }
      }
    }

    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }
      }

      .order#{$infix}-first {
        order: -1;
      }

      .order#{$infix}-last {
        order: $columns + 1;
      }

      @for $i from 0 through $columns {
        .order#{$infix}-#{$i} {
          order: $i;
        }
      }

      @if $columns > 0 {
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == '' and $i == 0) {
            // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }
    }
  }
}

// Background image mixin - For widget & datanode icons
$icon-urls: (
  widget: (
    light: '../icon/widgets/light-mode/',
    dark: '../icon/widgets/light-mode/'  // Change it to '../icon/widgets/dark-mode/' to use the dark icons
  ),
  datanode: (
    light: '../icon/datanodes/light-mode/',
    dark: '../icon/datanodes/dark-mode/'
  )
);

@mixin icon-background($icon-name, $type) {
  @media (prefers-color-scheme: light) {
    $icon-url: map-get(map-get($icon-urls, $type), 'light');
    background-image: url('#{$icon-url}#{$icon-name}');
  }

  @media (prefers-color-scheme: dark) {
    $icon-url: map-get(map-get($icon-urls, $type), 'dark');
    background-image: url('#{$icon-url}#{$icon-name}');
  }
}
